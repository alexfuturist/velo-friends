{"version":3,"sources":["components/Main/Content/Dialogs/Dialogs.module.scss","components/Main/Content/Dialogs/DialogsItems/DialogItem/DialogItem.module.scss","components/Main/Content/Dialogs/MessagesItems/MessagesItem/MessagesItem.module.scss","components/Main/Content/Dialogs/AddNewMessage/AddNewMessage.module.scss","components/Main/Content/Dialogs/DialogsItems/DialogItem/DialogItem.tsx","components/Main/Content/Dialogs/DialogsItems/DialogsItems.tsx","components/Main/Content/Dialogs/MessagesItems/MessagesItem/MessagesItem.tsx","components/Main/Content/Dialogs/MessagesItems/MessagesItems.tsx","components/Main/Content/Dialogs/AddNewMessage/AddNewMessage.tsx","components/Main/Content/Dialogs/Dialogs.tsx","components/Main/Content/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialogItem","to","id","NavLink","activeClassName","dialogItemActive","name","DialogsItems","dialogsItems","dialogs","map","d","MessagesItem","cn","messageWrapper","owner","messageAuthor","messageAuthorPhotoOwner","src","photos","userPhotoDefault","alt","messageAuthorName","messageTextOwner","messageText","messageAuthorPhoto","MessagesItems","scrollToBottom","messagesEnd","scrollIntoView","behavior","this","dialogId","messagesArray","dialogsMessages","filter","item","getDialogId","length","messages","m","messagesText","getMessagesItems","style","float","clear","ref","el","React","Component","AddNewMessageFormRedux","reduxForm","form","enableReinitialize","destroyOnUnmount","newPosts","onSubmit","handleSubmit","htmlFor","Field","newPosts__text","component","validate","required","placeholder","newPosts__button","AddNewMessage","useEffect","resetNewMessageField","newPosts__title","formData","addNewMessage","newMessage","console","log","onChange","setCurrentTextOfMessage","initialValues","undefined","newMessageText","Dialogs","dialogsTitle","dialogsContent","dialogsColumn","dialog","messagesColumn","messagesItems","DialogsContainer","userId","authorizedUserId","getUserProfile","match","params","compose","connect","state","dialogsPage","isAuth","auth","profilePage","profileInfo","small","actions","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.d53bb3bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Zbdx\",\"dialogsTitle\":\"Dialogs_dialogsTitle__QCU90\",\"dialogsContent\":\"Dialogs_dialogsContent__3MJab\",\"dialogsColumn\":\"Dialogs_dialogsColumn__1aQch\",\"messagesColumn\":\"Dialogs_messagesColumn__1Z03e\",\"messagesItems\":\"Dialogs_messagesItems__33bR3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__3AjHK\",\"NavLink\":\"DialogItem_NavLink__28e6D\",\"dialogItemActive\":\"DialogItem_dialogItemActive__2MYNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrapper\":\"MessagesItem_messageWrapper__3VskI\",\"owner\":\"MessagesItem_owner__W4GRb\",\"messageAuthor\":\"MessagesItem_messageAuthor__1JTqE\",\"messageAuthorPhoto\":\"MessagesItem_messageAuthorPhoto__1x4M2\",\"messageAuthorName\":\"MessagesItem_messageAuthorName__2tIuO\",\"messageText\":\"MessagesItem_messageText__1Cwle\",\"messageAuthorPhotoOwner\":\"MessagesItem_messageAuthorPhotoOwner__KdKRR\",\"messageTextOwner\":\"MessagesItem_messageTextOwner__3TQgC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPosts\":\"AddNewMessage_newPosts__3yqf4\",\"newPosts__title\":\"AddNewMessage_newPosts__title__1iZ4S\",\"newPosts__text\":\"AddNewMessage_newPosts__text__3GvE0\",\"newPosts__button\":\"AddNewMessage_newPosts__button__36opm\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport s from './DialogItem.module.scss'\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <p className={s.dialogItem}>\r\n            <NavLink\r\n                to={'/dialogs/' + props.id}\r\n                className={s.NavLink}\r\n                activeClassName={s.dialogItemActive}\r\n            >\r\n                {props.name}\r\n            </NavLink>\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","import React from 'react'\r\nimport { DialogType } from '../../../../../types/types'\r\nimport DialogItem from './DialogItem/DialogItem'\r\n\r\ntype PropsType = {\r\n    dialogs: DialogType[]\r\n}\r\n\r\nexport const DialogsItems: React.FC<PropsType> = (props) => {\r\n    let dialogsItems = props.dialogs.map((d) => (\r\n        <DialogItem name={d.name} key={d.id} id={d.id} />\r\n    ))\r\n\r\n    return <div>{dialogsItems}</div>\r\n}\r\n\r\nexport default DialogsItems\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport userPhotoDefault from '../../../../../../assets/images/user_default.png'\r\nimport cn from 'classnames'\r\n\r\nimport s from './MessagesItem.module.scss'\r\n\r\ntype PropsType = {\r\n    photos: string\r\n    name: string\r\n    messageText: string\r\n    id: number\r\n}\r\n\r\nconst MessagesItem: React.FC<PropsType> = (props) => {\r\n    if (props.name == 'Ð¯') {\r\n        return (\r\n            <div className={cn(s.messageWrapper, s.owner)}>\r\n                <div className={s.messageAuthor}>\r\n                    <div className={s.messageAuthorPhotoOwner}>\r\n                        <img src={props.photos || userPhotoDefault} alt=\"\" />\r\n                    </div>\r\n                    <div className={s.messageAuthorName}>{props.name}</div>\r\n                </div>\r\n                <p className={s.messageTextOwner}>{props.messageText}</p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={s.messageWrapper}>\r\n                <div className={s.messageAuthor}>\r\n                    <div className={s.messageAuthorPhoto}></div>\r\n                    <div className={s.messageAuthorName}>{props.name}</div>\r\n                </div>\r\n                <p className={s.messageText}>{props.messageText}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessagesItem\r\n","import React from 'react'\r\nimport { DialogMessagesType } from '../../../../../types/types'\r\nimport MessagesItem from './MessagesItem/MessagesItem'\r\n\r\ntype PropsType = {\r\n    dialogsMessages: DialogMessagesType[]\r\n    photos: string\r\n    dialogId: number\r\n    messagesEnd: HTMLDivElement\r\n}\r\n\r\nclass MessagesItems extends React.Component<PropsType> {\r\n    scrollToBottom = () => {\r\n        //@ts-ignore\r\n        this.messagesEnd.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom()\r\n    }\r\n\r\n    getDialogId() {\r\n        if (this.props.dialogId) {\r\n            return this.props.dialogId\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    getMessagesItems() {\r\n        let messagesArray = [\r\n            ...this.props.dialogsMessages.filter(\r\n                (item) => item.id == +this.getDialogId()\r\n            ),\r\n        ]\r\n\r\n        if (messagesArray.length > 0) {\r\n            let messagesItems = messagesArray[0].messages.map((m) => (\r\n                <MessagesItem\r\n                    name={m.name}\r\n                    messageText={m.messagesText}\r\n                    key={m.id}\r\n                    id={m.id}\r\n                    photos={this.props.photos}\r\n                />\r\n            ))\r\n            return messagesItems\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"toBottom\">\r\n                {this.getMessagesItems()}\r\n                <div\r\n                    style={{ float: 'left', clear: 'both' }}\r\n                    ref={(el) => {\r\n                        //@ts-ignore\r\n                        this.messagesEnd = el\r\n                    }}\r\n                ></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessagesItems\r\n","import React, { useEffect } from 'react';\r\nimport s from './AddNewMessage.module.scss';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required } from '../../../../../utils/validators/validators';\r\n\r\nconst AddNewMessageForm = (props: any) => {\r\n  return (\r\n    <form className={s.newPosts} onSubmit={props.handleSubmit}>\r\n      <label htmlFor=\"newMessage\"></label>\r\n      <Field className={s.newPosts__text} component=\"textarea\" name=\"newMessage\" validate={[required]} placeholder=\"Ð¼Ð¾Ñ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ..\"></Field>\r\n      <button className={`button ${s.newPosts__button}`}>ÐÑÐ´Ð¿ÑÐ°Ð²Ð¸ÑÐ¸</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewMessageFormRedux = reduxForm({\r\n  form: 'DialogsAddNewMessage',\r\n  enableReinitialize: true,\r\n  destroyOnUnmount: false\r\n})(AddNewMessageForm);\r\n\r\nconst AddNewMessage = (props: any) => {\r\n\r\n  useEffect(() => { props.resetNewMessageField() }, [props.dialogId]);\r\n\r\n  let newMessageText = () => {\r\n    if (props.dialogsMessages.filter((item: any) => item.id == (+props.dialogId))[0] != undefined) {\r\n      return props.dialogsMessages.filter((item: any) => item.id == (+props.dialogId))[0].newMessageText;\r\n    } else {\r\n      return \"\"\r\n    }\r\n  };\r\n\r\n  let setCurrentTextOfMessage = (formData: any) => {\r\n    props.setCurrentTextOfMessage(formData.newMessage, props.dialogId);\r\n  };\r\n\r\n  //ÐºÐ¾Ð»Ð±ÑÐº ÑÑÐ½ÐºÑÐ¸Ñ \r\n  let addMessage = (formData: any) => {\r\n    props.addNewMessage(formData.newMessage, props.dialogId);\r\n    console.log(formData.newMessage);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <p className={s.newPosts__title}>ÐÐ¾Ð²Ðµ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ</p>\r\n      <AddNewMessageFormRedux onSubmit={addMessage} onChange={setCurrentTextOfMessage}\r\n        initialValues={{ newMessage: newMessageText() }} />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default AddNewMessage;\r\n","import React from 'react'\r\nimport s from './Dialogs.module.scss'\r\nimport DialogsItems from './DialogsItems/DialogsItems'\r\nimport MessagesItems from './MessagesItems/MessagesItems'\r\nimport { render } from '@testing-library/react'\r\nimport AddNewMessage from './AddNewMessage/AddNewMessage'\r\n// import { DialogMessagesType, DialogType } from '../../../../types/types'\r\n// import { SetCurrentTextOfMessageActionType } from '../../../../redux/dialogs-reducer'\r\n\r\n// type PropsType = {\r\n//     dialogs: DialogType[]\r\n//     dialogsMessages: DialogMessagesType[]\r\n//     isAuth: boolean\r\n//     photos: string\r\n//     dialogId: number\r\n\r\n//     addNewMessage: (newMessageText: string, dialogId: number) => void\r\n//     resetNewMessageField: () => (dispatch: any) => void\r\n//     setCurrentTextOfMessage: (\r\n//         currentTextOfMessage: string,\r\n//         dialogId: number\r\n//     ) => SetCurrentTextOfMessageActionType\r\n// }\r\n\r\nconst Dialogs = (props: any) => {\r\n    return (\r\n        <section className={s.dialogs}>\r\n            <p className={s.dialogsTitle}>ÐÐ¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ</p>\r\n\r\n            <div className={s.dialogsContent}>\r\n                <div className={s.dialogsColumn}>\r\n                    <div className={s.dialog}>\r\n                        <DialogsItems {...props} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.messagesColumn}>\r\n                    <div className={s.messagesItems}>\r\n                        <MessagesItems\r\n                            {...props}\r\n                            dialogId={props.dialogId}\r\n                        />\r\n                    </div>\r\n\r\n                    <AddNewMessage\r\n                        addNewMessage={props.addNewMessage}\r\n                        dialogId={props.dialogId}\r\n                        resetNewMessageField={props.resetNewMessageField}\r\n                        setCurrentTextOfMessage={\r\n                            props.setCurrentTextOfMessage\r\n                        }\r\n                        {...props}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../../../hoc/AuthRedirect'\r\nimport {\r\n    addNewMessage,\r\n    resetNewMessageField,\r\n    actions,\r\n} from '../../../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { getUserProfile } from '../../../../redux/profile-reducer'\r\nimport { AppStateType } from '../../../../redux/redux-store'\r\nimport { DialogMessagesType, DialogType } from '../../../../types/types'\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: DialogType[]\r\n    dialogsMessages: DialogMessagesType[]\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n    photos: string\r\n    match?: any\r\n}\r\n\r\nexport type SetCurrentTextOfMessageActionType = {\r\n    type: string\r\n    currentTextOfMessage: string\r\n    dialogId: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewMessage: (newMessageText: string, dialogId: number) => void\r\n    getUserProfile: (userId: number | null) => void\r\n    resetNewMessageField: () => void\r\n    setCurrentTextOfMessage: (\r\n        currentTextOfMessage: string,\r\n        dialogId: number\r\n    ) => SetCurrentTextOfMessageActionType\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass DialogsContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.authorizedUserId\r\n        this.props.getUserProfile(userId)\r\n    }\r\n\r\n    render() {\r\n        let dialogId = this.props.match.params.dialogId\r\n        console.log(dialogId)\r\n\r\n        return <Dialogs {...this.props} dialogId={dialogId} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        dialogsMessages: state.dialogsPage.dialogsMessages,\r\n        isAuth: state.auth.isAuth,\r\n        authorizedUserId: state.auth.userId,\r\n        photos: state.profilePage.profileInfo.photos.small,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        addNewMessage,\r\n        getUserProfile,\r\n        resetNewMessageField,\r\n        setCurrentTextOfMessage: actions.setCurrentTextOfMessage,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(DialogsContainer) as React.ComponentType\r\n"],"sourceRoot":""}