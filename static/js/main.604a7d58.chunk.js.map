{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.ts","components/Main/Content/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.scss","api/users-api.ts","redux/users-reducer.ts","components/Main/Content/Content.module.css","components/Main/Content/Profile/Profile.module.css","components/Main/Content/Profile/Posts/Posts.module.scss","components/Common/Preloader/Preloader.module.scss","components/Main/Main.module.css","components/Main/Navbar/Navbar.module.css","components/Main/Content/Profile/Posts/Post/Post.module.scss","components/Main/Content/Profile/ProfileInfo/ProfileData/ProfileData.module.scss","components/Main/Content/StarUsers/StarUsers.module.scss","hoc/AuthRedirect.tsx","api/profile-api.ts","redux/profile-reducer.ts","redux/star-users-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Main/Navbar/Navbar.tsx","components/Main/Content/AboutProject/AboutProject.tsx","components/Main/Content/Friends/Friends.tsx","components/Main/Content/Music/Music.tsx","components/Main/Content/Photos/Photos.tsx","components/Main/Content/Profile/NewPost/NewPost.tsx","components/Main/Content/Profile/Posts/Post/Post.tsx","components/Main/Content/Profile/Posts/Posts.tsx","components/Main/Content/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Main/Content/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Main/Content/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Main/Content/Profile/ProfileInfo/ProfileInfo.tsx","components/Main/Content/Profile/Profile.tsx","components/Main/Content/Profile/ProfileContainer.tsx","components/Main/Content/Routes/Routes.tsx","components/Main/Content/Settings/Settings.tsx","components/Main/Content/StarUsers/StarUsers.tsx","components/Main/Content/StarUsers/StarUsersContainer.tsx","components/Main/Content/Content.tsx","components/Main/Main.tsx","App.tsx","index.tsx","components/Main/Content/Profile/ProfileInfo/ProfileInfo.module.scss","components/Header/Header.module.scss","assets/images/user_default.png","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Main/Content/AboutProject/AboutProject.module.scss","components/Main/Content/Profile/NewPost/NewPost.module.scss","utils/validators/validators.ts","components/Common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Main/Content/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.scss"],"names":["ResultCodes","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","initialState","dialogs","id","name","dialogsMessages","messages","messagesText","newMessageText","actions","addMessage","dialogId","type","refreshCurrentTextOfMessage","setCurrentTextOfMessage","currentTextOfMessage","addNewMessage","dispatch","length","reset","resetNewMessageField","dialogsReducer","state","action","dialogsMessagesItemAvaileble","filter","dm","newMessage","dialogsMessagesMockup","map","module","exports","usersAPI","currentPage","pageSize","get","then","res","data","delete","post","users","totalUsersCount","isFetching","followingInProgress","userId","totalCount","requestUsers","a","response","items","updateUsers","pageNumber","unfollow","resultCode","Success","follow","usersReducer","u","followed","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","profileAPI","status","put","photoFile","formData","FormData","append","profile","profileInfo","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","photos","small","userPhotoDefault","large","posts","message","isUpdatePostMode","addPost","newPostText","setUserProfile","setUserStatus","updatePhotoSuccess","deletePostSuccess","postIndex","index","updatePostSuccess","updatePostMode","flag","addNewPost","getUserProfile","getUserStatus","updateUserStatus","updatePhoto","file","console","log","saveProfile","getState","stopSubmit","_error","Promise","reject","deletePost","profilePage","findIndex","element","updatePost","profileReducer","newPost","Math","max","p","item","followSucces","unfollowSucces","setUsersStars","toggleIsFetching","toggleFollowingInProgress","starUsersReducer","initialized","appReducer","rootReducer","combineReducers","dialogsPage","usersPage","authReducer","form","formReducer","app","starUsersPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","login","logout","className","s","header","wrapper","header__img","src","loginName","logoutButton","onClick","loginLink","HeaderContainer","NavbarFriends","navbar__friendsTitle","activeClassName","navbar__active","friends__items","friends__item","alt","navbar","navbar__items","navbar__item","navbar__friends","aboutProject","aboutProject__title","stack","stack__item","list__item","stack__title","stack__list","cn","stack__listBottom","list__itemPink","list__itemBlue","aboutProject__linkTitle","aboutProject__link","target","href","AddNewPostFormRedux","maxLengthCreator","minLengthCreator","reduxForm","onSubmit","handleSubmit","htmlFor","Field","newPosts__text","component","placeholder","validate","required","maxLength","newPosts__button","AddNewPost","newPosts","newPosts__title","initialValues","Post","useState","editMode","setEditMode","massage","setMessage","warningMode","setWarningMode","useEffect","deactivateWarningMode","post__constant","post__image","post__text","controls","controls__button","controls__buttonClose","warning__container","onBlur","tabIndex","warning__title","warning__buttons","post__update","post__textareaContainer","post__textarea","onChange","e","currentTarget","value","autoFocus","onFocus","val","Posts","postsElements","reverse","ProfileStatusWithHooks","memo","setStatus","undefined","profileStatus","profileStatus__Description","isOwner","profileStatus__input","Contact","contactTitle","contactValue","profileInfo__Contact","profileInfo__ContactTitle","profileInfo__ContactValue","ProfileData","goToEditMode","profileInfo__Text","profileInfo__TextLeft","profileInfo__Name","profileInfo__Parametr","bold","profileInfo__button","profileInfo__Contacts","profileInfo__ContactsTitle","Object","keys","key","ProfileDataFormRedux","error","profileInfo__Form","profileInfo__FormLeft","profileInfo__Checkbox","profileInfo__CheckboxInput","profileInfo__CheckboxLabel","profileInfo__ParametrInput","profileInfo__buttonSave","formCommonError","profileInfo__FormContacts","ProfileInfo","profileCover","profileCover__img","profileInfo__PhotoWrapper","profileInfo__PhotoImage","input__wrapper","input__file","files","input__fileButton","input__fileIcon","input__fileButtonText","Profile","ProfileContainer","match","params","authorizedUserId","refreshProfile","prevProps","withRouter","StarUsers","avatar","location","city","country","users__item","users__img","users__button__unfollow","users__button","active","hover","users__button__follow","users__info","users__infoTop","users__name","users__city","users__infoBottom","users__status","users__country","StarUsersContainer","Preloader","getStars","getIsFetchingStars","getFollowingInProgressStars","DialogsContainer","lazy","UsersContainer","Login","Content","content","fallback","exact","path","render","Main","main","App","initializeApp","promise","getAuthUserData","all","renderEntireTree","ReactDOM","StrictMode","document","getElementById","subscribe","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","CaptchaIsRequired","getCaptchaUrl","url","minLength","preloader","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress"],"mappings":"mHAAA,0GAUYA,EAKAC,EAfZ,SAEaC,EAFb,OAEwBC,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,2C,SAIPP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,wKCRRO,EAAe,CACfC,QAAS,CACL,CACIC,GAAI,EACJC,KAAM,8CAEV,CACID,GAAI,EACJC,KAAM,4BAEV,CACID,GAAI,EACJC,KAAM,kCAEV,CACID,GAAI,EACJC,KAAM,4BAEV,CACID,GAAI,EACJC,KAAM,kCAEV,CACID,GAAI,EACJC,KAAM,oDAEV,CACID,GAAI,EACJC,KAAM,kCAEV,CACID,GAAI,EACJC,KAAM,4BAEV,CACID,GAAI,EACJC,KAAM,4BAEV,CACID,GAAI,GACJC,KAAM,kCAEV,CACID,GAAI,GACJC,KAAM,wCAEV,CACID,GAAI,GACJC,KAAM,kCAEV,CACID,GAAI,GACJC,KAAM,wCAEV,CACID,GAAI,GACJC,KAAM,0DAEV,CACID,GAAI,GACJC,KAAM,8CAEV,CACID,GAAI,GACJC,KAAM,0DAEV,CACID,GAAI,GACJC,KAAM,8CAEV,CACID,GAAI,GACJC,KAAM,0DAEV,CACID,GAAI,GACJC,KAAM,mCAGdC,gBAAiB,CACb,CACIF,GAAI,EACJG,SAAU,CACN,CACIH,GAAI,EACJC,KAAM,gEACNG,aACI,qUAGZC,eAAgB,IAEpB,CACIL,GAAI,EACJG,SAAU,CACN,CACIH,GAAI,EACJC,KAAM,6CACNG,aAAc,6IAElB,CACIJ,GAAI,EACJC,KAAM,SACNG,aAAc,yCAElB,CACIJ,GAAI,EACJC,KAAM,SACNG,aACI,iQAER,CACIJ,GAAI,EACJC,KAAM,6CACNG,aACI,wMAER,CACIJ,GAAI,EACJC,KAAM,SACNG,aAAc,gBAElB,CACIJ,GAAI,EACJC,KAAM,6CACNG,aAAc,mEAGtBC,eAAgB,IAEpB,CACIL,GAAI,EACJG,SAAU,CACN,CACIH,GAAI,EACJC,KAAM,2BACNG,aAAc,0JAElB,CACIJ,GAAI,EACJC,KAAM,SACNG,aACI,yNAER,CACIJ,GAAI,EACJC,KAAM,2BACNG,aAAc,uLAGtBC,eAAgB,IAEpB,CACIL,GAAI,EACJG,SAAU,CACN,CACIH,GAAI,EACJC,KAAM,iCACNG,aAAc,+LAElB,CACIJ,GAAI,EACJC,KAAM,SACNG,aAAc,iGAElB,CACIJ,GAAI,EACJC,KAAM,SACNG,aAAc,qHAGtBC,eAAgB,IAEpB,CACIL,GAAI,EACJG,SAAU,CACN,CACIH,GAAI,EACJC,KAAM,2BACNG,aAAc,yNAGtBC,eAAgB,MAwHfC,EAAU,CACnBC,WAAY,SAACF,EAAwBG,GAAzB,MACP,CACGC,KAAM,yBACNJ,eAAgBA,EAChBG,SAAUA,IAElBE,4BAA6B,SAACF,GAAD,MACxB,CACGC,KAAM,6CACND,SAAUA,IAElBG,wBAAyB,SAACC,EAA8BJ,GAA/B,MACpB,CACGC,KAAM,yCACNG,qBAAsBA,EACtBJ,SAAUA,KAOTK,EACT,SAACR,EAAwBG,GAAzB,OACA,SAACM,GACOT,EAAeU,OAAS,IACxBD,EAASR,EAAQC,WAAWF,EAAgBG,IAC5CM,EAASR,EAAQI,4BAA4BF,IAC7CM,EAASE,YAAM,4BAIdC,EAAuB,kBAAsB,SAACH,GACvDA,EAASE,YAAM,2BAGJE,IAvJQ,WAGC,IAFpBC,EAEmB,uDAFXrB,EACRsB,EACmB,uCACnB,OAAQA,EAAOX,MACX,IAAK,yBACD,IAAIY,EAA4B,YACzBF,EAAMjB,gBAAgBoB,QACrB,SAACC,GAAD,OAAQA,EAAGvB,IAAMoB,EAAOZ,aAG5BR,GAAM,GAAD,OAAIqB,EAA6B,GAAGlB,SAASY,OAAS,GAG3DS,EAAa,CACbxB,IAAKA,EACLC,KAAM,SACNG,aAAcgB,EAAOf,gBAGrBoB,EAAwB,CACxBzB,GAAIoB,EAAOZ,SACXL,SAAU,CAACqB,GACXnB,eAAgB,IAGpB,OAAIgB,EAA6BN,OAAS,EAC/B,2BACAI,GADP,IAEIjB,gBAAgB,YACTiB,EAAMjB,gBAAgBwB,KAAI,SAACH,GAC1B,OAAOA,EAAGvB,IAAMoB,EAAOZ,SAAhB,2BAEMe,GAFN,IAGGpB,SAAS,GAAD,mBAAMoB,EAAGpB,UAAT,CAAmBqB,MAE/BD,QAKX,2BACAJ,GADP,IAEIjB,gBAAgB,GAAD,mBACRiB,EAAMjB,iBADE,CAEXuB,MAMhB,IAAK,6CACD,OAAO,2BACAN,GADP,IAEIjB,gBAAgB,YACTiB,EAAMjB,gBAAgBwB,KAAI,SAACH,GAC1B,OAAOA,EAAGvB,IAAMoB,EAAOZ,SAAhB,2BAEMe,GAFN,IAGGlB,eAAgB,KAEpBkB,QAMtB,IAAK,yCACD,IAAIF,EAA4B,YACzBF,EAAMjB,gBAAgBoB,QACrB,SAACC,GAAD,OAAQA,EAAGvB,IAAMoB,EAAOZ,aAI5BiB,EAAwB,CACxBzB,GAAIoB,EAAOZ,SACXL,SAAU,GACVE,eAAgBe,EAAOR,sBAG3B,OAAIS,EAA6BN,OAAS,EAC/B,2BACAI,GADP,IAEIjB,gBAAgB,YACTiB,EAAMjB,gBAAgBwB,KAAI,SAACH,GAC1B,OAAOA,EAAGvB,IAAMoB,EAAOZ,SAAhB,2BAEMe,GAFN,IAGGlB,eACIe,EAAOR,uBAEfW,QAKX,2BACAJ,GADP,IAEIjB,gBAAgB,GAAD,mBACRiB,EAAMjB,iBADE,CAEXuB,MAMhB,QACI,OAAON,K,mBC7SnBQ,EAAOC,QAAU,CAAC,kBAAoB,2CAA2C,sBAAwB,+CAA+C,kBAAoB,2CAA2C,sBAAwB,+CAA+C,sBAAwB,+CAA+C,2BAA6B,oDAAoD,2BAA6B,oDAAoD,2BAA6B,oDAAoD,KAAO,8BAA8B,0BAA4B,mDAAmD,2BAA6B,oDAAoD,qBAAuB,8CAA8C,0BAA4B,mDAAmD,0BAA4B,mDAAmD,oBAAsB,6CAA6C,wBAA0B,iDAAiD,gBAAkB,2C,4NCenpCC,EAAW,SACXC,EAAqBC,GAC1B,OAAOvC,IACFwC,IADE,qBAEeF,EAFf,kBAEoCC,IAEtCE,MAAK,SAACC,GAAD,OAASA,EAAIC,SANlBN,EAAW,SAQX7B,GACL,OAAOR,IACF4C,OADE,iBAC2CpC,IAC7CiC,MAAK,SAACC,GAAD,OAASA,EAAIC,SAXlBN,EAAW,SAab7B,GACH,OAAOR,IACF6C,KADE,iBACyCrC,IAC3CiC,MAAK,SAACC,GAAD,OAASA,EAAIC,SCxB3BrC,EAAe,CACfwC,MAAO,GACPP,SAAU,EACVD,YAAa,EACbS,gBAAiB,EACjBC,YAAY,EACZC,oBAAqB,IAiGZnC,EACK,SAACoC,GAAD,MACT,CACGjC,KAAM,kBACNiC,WAJCpC,EAMO,SAACoC,GAAD,MACX,CACGjC,KAAM,oBACNiC,WATCpC,EAWC,SAACgC,GAAD,MACL,CACG7B,KAAM,qBACN6B,UAdChC,EAgBO,SAACwB,GAAD,MACX,CACGrB,KAAM,4BACNqB,gBAnBCxB,EAqBW,SAACqC,GAAD,MACf,CACGlC,KAAM,iCACNkC,eAxBCrC,EA0BS,SAACkC,GAAD,MACb,CACG/B,KAAM,8BACN+B,eA7BClC,EA+BkB,SAACmC,EAA8BC,GAA/B,MACtB,CACGjC,KAAM,wCACNgC,sBACAC,WAOCE,EACT,SAACd,EAAqBC,GAAtB,8CACA,WAAOjB,GAAP,eAAA+B,EAAA,6DACI/B,EAASR,GAAyB,IADtC,SAGyBuB,EACF,EACH,IALpB,OAGQiB,EAHR,OAQIhC,EAASR,GAAyB,IAClCQ,EAASR,EAAiBwC,EAASC,QACnCjC,EAASR,EAA2BwC,EAASH,aAVjD,2CADA,uDAcSK,EACT,SAACC,EAAoBlB,GAArB,8CACA,WAAOjB,GAAP,eAAA+B,EAAA,6DACI/B,EAASR,GAAyB,IAClCQ,EAASR,EAAuB2C,IAFpC,SAIqBpB,EAAkBoB,EAAYlB,GAJnD,OAIQI,EAJR,OAMIrB,EAASR,GAAyB,IAClCQ,EAASR,EAAiB6B,EAAKY,QAPnC,2CADA,uDAWSG,EACT,SAACR,GAAD,8CACA,WAAO5B,GAAP,eAAA+B,EAAA,6DACI/B,EAASR,GAAkC,EAAMoC,IADrD,SAGyBb,EAAkBa,GAH3C,OAGQI,EAHR,OAKIhC,EAASR,GAAkC,EAAOoC,IAC9CI,EAASK,YAAc7D,IAAY8D,SACnCtC,EAASR,EAAuBoC,IAPxC,2CADA,uDAYSW,EACT,SAACX,GAAD,8CACA,WAAO5B,GAAP,eAAA+B,EAAA,6DACI/B,EAASR,GAAkC,EAAMoC,IADrD,SAGyBb,EAAgBa,GAHzC,OAGQI,EAHR,OAKIhC,EAASR,GAAkC,EAAOoC,IAC9CI,EAASK,YAAc7D,IAAY8D,SACnCtC,EAASR,EAAqBoC,IAPtC,2CADA,uDAYWY,IA5LM,WAGG,IAFpBnC,EAEmB,uDAFXrB,EACRsB,EACmB,uCACnB,OAAQA,EAAOX,MACX,IAAK,kBAED,OAAO,2BAEAU,GAFP,IAKImB,MAAOnB,EAAMmB,MAAMZ,KAAI,SAAC6B,GAEpB,OAAIA,EAAEvD,KAAOoB,EAAOsB,OAIT,2BACAa,GADP,IAEIC,UAAU,IAIXD,OAKnB,IAAK,oBACD,OAAO,2BACApC,GADP,IAEImB,MAAOnB,EAAMmB,MAAMZ,KAAI,SAAC6B,GACpB,OAAIA,EAAEvD,KAAOoB,EAAOsB,OACT,2BACAa,GADP,IAEIC,UAAU,IAIXD,OAKnB,IAAK,qBACD,OAAO,2BACApC,GADP,IAGImB,MAAM,YAAKlB,EAAOkB,SAI1B,IAAK,4BACD,OAAO,2BACAnB,GADP,IAEIW,YAAaV,EAAOU,cAI5B,IAAK,iCACD,OAAO,2BACAX,GADP,IAEIoB,gBAAiBnB,EAAOuB,aAIhC,IAAK,8BACD,OAAO,2BACAxB,GADP,IAEIqB,WAAYpB,EAAOoB,aAI3B,IAAK,wCACD,OAAO,2BACArB,GADP,IAEIsB,oBAAqBrB,EAAOqB,oBAAP,sBACXtB,EAAMsB,qBADK,CACgBrB,EAAOsB,SACtCvB,EAAMsB,oBAAoBnB,QACtB,SAACtB,GAAD,OAAQA,GAAMoB,EAAOsB,YAKvC,QACI,OAAOvB,K,oBCvGnBQ,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,oBCA1BD,EAAOC,QAAU,CAAC,UAAY,+B,oBCA9BD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,8BAA8B,aAAe,6BAA6B,eAAiB,+BAA+B,iBAAmB,iCAAiC,gBAAkB,gCAAgC,qBAAuB,qCAAqC,eAAiB,+BAA+B,cAAgB,gC,mBCA9ZD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,eAAiB,6BAA6B,YAAc,0BAA0B,WAAa,yBAAyB,SAAW,uBAAuB,iBAAmB,+BAA+B,sBAAwB,oCAAoC,aAAe,2BAA2B,OAAS,qBAAqB,wBAA0B,sCAAsC,eAAiB,6BAA6B,mBAAqB,iCAAiC,eAAiB,6BAA6B,iBAAmB,iC,mBCArmBD,EAAOC,QAAU,CAAC,kBAAoB,uCAAuC,sBAAwB,2CAA2C,kBAAoB,uCAAuC,sBAAwB,2CAA2C,KAAO,0BAA0B,sBAAwB,2CAA2C,2BAA6B,gDAAgD,qBAAuB,0CAA0C,0BAA4B,+CAA+C,0BAA4B,+CAA+C,oBAAsB,2C,mBCA5qBD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,YAAc,+BAA+B,WAAa,8BAA8B,cAAgB,iCAAiC,YAAc,+BAA+B,eAAiB,kCAAkC,YAAc,+BAA+B,cAAgB,iCAAiC,kBAAoB,qCAAqC,YAAc,+BAA+B,eAAiB,kCAAkC,sBAAwB,yCAAyC,wBAA0B,2CAA2C,OAAS,0BAA0B,MAAQ,2B,oJCQhsB6B,EAA6B,SAC7BtC,GAD6B,MAEG,CAChCuC,OAAQvC,EAAMwC,KAAKD,SAIVE,EAAmB,SAACC,GAAoB,IAC3CC,EAD0C,4JAE5C,WACI,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAeE,KAAKC,QAFI,cAAC,IAAD,CAAUC,GAAG,cAHJ,GAChBC,IAAML,WAYtC,OAJqCM,YAAQV,EAARU,CACjCL,K,6eCQKM,EAAa,SACP1B,GACX,OAAOlD,IACFwC,IADE,kBACqCU,IACvCT,MAAK,SAACC,GAAD,OAASA,EAAIC,SAJlBiC,EAAa,SAMZ1B,GACN,OAAOlD,IACFwC,IADE,yBAC4BU,IAC9BT,MAAK,SAACC,GAAD,OAASA,EAAIC,SATlBiC,EAAa,SAWTC,GACT,OAAO7E,IACF8E,IADE,iBACsC,CACrCD,OAAQA,IAEXpC,MAAK,SAACC,GAAD,OAASA,EAAIC,SAhBlBiC,EAAa,SAkBVG,GACR,IAAMC,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,QAASH,GAElB/E,IACF8E,IADE,gBAC8DE,EAAU,CACvE3E,QAAS,CACL,eAAgB,yBAGvBoC,MAAK,SAACC,GAAD,OAASA,EAAIC,SA5BlBiC,EAAa,SA8BVO,GACR,OAAOnF,IACF8E,IADE,UAC+BK,GACjC1C,MAAK,SAACC,GAAD,OAASA,EAAIC,SCrD3BrC,EAAe,CACf8E,YAAa,CACTC,QAAS,8CACTC,SAAU,CACNC,SAAU,KACVC,QAAS,KACTC,GAAI,KACJC,QAAS,KACTC,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,SAAU,MAEdC,gBAAgB,EAChBC,0BAA2B,KAC3BC,SAAU,sBACV/C,OAAQ,KACRgD,OAAQ,CACJC,MAAOC,IACPC,MAAOD,MAGfvB,OAAQ,sGACRyB,MAAO,CACH,CACI9F,GAAI,EACJ+F,QACI,+uBAER,CACI/F,GAAI,EACJ+F,QACI,qzBAER,CACI/F,GAAI,EACJ+F,QACI,q2DAER,CACI/F,GAAI,EACJ+F,QAAS,yJAEb,CACI/F,GAAI,EACJ+F,QAAS,mOAGjBC,kBAAkB,GA6FT1F,EAAU,CACnB2F,QAAS,SAACC,GAAD,MACJ,CACGzF,KAAM,sBACNyF,YAAaA,IAErBC,eAAgB,SAACvB,GAAD,MACX,CACGnE,KAAM,8BACNmE,YAAaA,IAErBwB,cAAe,SAAC/B,GAAD,MACV,CACG5D,KAAM,6BACN4D,OAAQA,IAEhBgC,mBAAoB,SAACX,GAAD,MACf,CACGjF,KAAM,kCACNiF,WAERY,kBAAmB,SAACC,GAAD,MACd,CACG9F,KAAM,yBACN+F,MAAOD,IAEfE,kBAAmB,SAACF,EAAmBR,GAApB,MACd,CACGtF,KAAM,yBACN+F,MAAOD,EACPR,QAASA,IAEjBW,eAAgB,SAACC,GAAD,MACX,CACGlG,KAAM,8BACNkG,KAAMA,KAQLC,EACT,SAACV,GAAD,OACA,SAACpF,GACGA,EAASR,EAAQ2F,QAAQC,IACzBpF,EAASE,YAAM,wBAGV6F,EACT,SAACnE,GAAD,8CACA,WAAO5B,GAAP,eAAA+B,EAAA,sEAC2BuB,EAA0B1B,GADrD,OACUI,EADV,OAGIhC,EAASR,EAAQ6F,eAAerD,IAHpC,2CADA,uDAOSgE,EACT,SAACpE,GAAD,8CACA,WAAO5B,GAAP,eAAA+B,EAAA,sEAC2BuB,EAAqB1B,GADhD,OACUI,EADV,OAGIhC,EAASR,EAAQ8F,cAActD,IAHnC,2CADA,uDAOSiE,EACT,SAAC1C,GAAD,8CACA,WAAOvD,GAAP,SAAA+B,EAAA,sEAC2BuB,EAAwBC,GADnD,cAGiBlB,aAAe7D,IAAY8D,SACpCtC,EAASR,EAAQ8F,cAAc/B,IAJvC,2CADA,uDASS2C,EACT,SAACC,GAAD,8CACA,WAAOnG,GAAP,eAAA+B,EAAA,sEAC2BuB,EAAuB6C,GADlD,QACUnE,EADV,QAGiBK,aAAe7D,IAAY8D,UACpC8D,QAAQC,IAAIrE,GACZhC,EAASR,EAAQ+F,mBAAmBvD,EAASX,KAAKuD,UAL1D,2CADA,uDAUS0B,EACT,SAACzC,GAAD,8CACA,WAAO7D,EAAUuG,GAAjB,iBAAAxE,EAAA,sEAC2BuB,EAAuBO,GADlD,UACU7B,EADV,OAEUJ,EAAS2E,IAAW1D,KAAKjB,OAE3BI,EAASK,aAAe7D,IAAY8D,QAJ5C,gBAKQtC,EAAS+F,EAAenE,IALhC,8BAOQ5B,EACIwG,YAAW,eAAgB,CACvBC,OAAQzE,EAAS3C,SAAS,MAT1C,kBAYeqH,QAAQC,OAAO3E,EAAS3C,SAAS,KAZhD,4CADA,yDAiBSuH,EACT,SAAC1H,GAAD,OACA,SAACc,EAAUuG,GACP,IACId,EADUc,IAAWM,YAAY7B,MACf8B,WAClB,SAACC,GAAD,OAAuBA,EAAQ7H,KAAOA,KAG1Cc,EAASR,EAAQgG,kBAAkBC,IACnCzF,EAASR,EAAQoG,gBAAe,MAG3BoB,EACT,SAAC9H,EAAY+F,GAAb,OACA,SAACjF,EAAUuG,GACP,IACId,EADUc,IAAWM,YAAY7B,MACf8B,WAClB,SAACC,GAAD,OAAuBA,EAAQ7H,KAAOA,KAG1Cc,EAASR,EAAQmG,kBAAkBF,EAAWR,MAGvCgC,IAzNQ,WAGC,IAFpB5G,EAEmB,uDAFXrB,EACRsB,EACmB,uCACnB,OAAQA,EAAOX,MACX,IAAK,sBACD,IAAIuH,EAAU,CACVhI,IAAK,GAAD,OAAIiI,KAAKC,IAAL,MAAAD,KAAI,YAAQ9G,EAAM2E,MAAMpE,KAAI,SAACyG,GAAD,OAAOA,EAAEnI,QAAO,GACpD+F,QAAS3E,EAAO8E,aAKpB,OAFAgB,QAAQC,IAAIa,GAEL,2BACA7G,GADP,IAEI2E,MAAM,GAAD,mBAAM3E,EAAM2E,OAAZ,CAAmBkC,MAIhC,IAAK,8BACD,OAAO,2BACA7G,GADP,IAEIyD,YAAaxD,EAAOwD,cAI5B,IAAK,6BACD,OAAO,2BACAzD,GADP,IAEIkD,OAAQjD,EAAOiD,SAIvB,IAAK,kCACD,OAAO,2BACAlD,GADP,IAEIyD,YAAY,2BACLzD,EAAMyD,aADF,IAEPc,OAAQtE,EAAOsE,WAK3B,IAAK,yBACD,OAAO,2BACAvE,GADP,IAEI2E,MAAM,YACC3E,EAAM2E,MAAMxE,QACX,SAAC8G,EAAM5B,GAAP,OAAiBA,IAAUpF,EAAOoF,YAMlD,IAAK,yBACD,IAAIsB,EAAa,CACb9H,IAAK,GAAD,OAAImB,EAAM2E,MAAM1E,EAAOoF,OAAOxG,IAClC+F,QAAS3E,EAAO2E,SAGpB,OAAO,2BACA5E,GADP,IAEI2E,MAAM,YACC3E,EAAM2E,MAAMpE,KAAI,SAACW,EAAMmE,GACtB,OAAIA,IAAUpF,EAAOoF,MACVsB,EAGJzF,QAMvB,IAAK,8BACD,OAAO,2BACAlB,GADP,IAEI6E,iBAAkB5E,EAAOuF,OAIjC,QACI,OAAOxF,K,oLC9IfrB,EAAe,CACfwC,MAAO,GACPP,SAAU,EACVD,YAAa,EACbS,gBAAiB,EACjBC,YAAY,EACZC,oBAAqB,IAmFZnC,EAAU,CACnB+H,aAAc,SAAC3F,GAAD,MACT,CACGjC,KAAM,uBACNiC,WAER4F,eAAgB,SAAC5F,GAAD,MACX,CACGjC,KAAM,yBACNiC,WAER6F,cAAe,SAACjG,GAAD,MACV,CACG7B,KAAM,gCACN6B,UAERkG,iBAAkB,SAAChG,GAAD,MACb,CACG/B,KAAM,mCACN+B,eAERiG,0BAA2B,SAAChG,EAA8BC,GAA/B,MACtB,CACGjC,KAAM,6CACNgC,sBACAC,YAiCGgG,EAzIU,WAGD,IAFpBvH,EAEmB,uDAFXrB,EACRsB,EACmB,uCACnB,OAAQA,EAAOX,MACX,IAAK,uBAED,OAAO,2BAEAU,GAFP,IAKImB,MAAOnB,EAAMmB,MAAMZ,KAAI,SAAC6B,GAEpB,OAAIA,EAAEvD,KAAOoB,EAAOsB,OAIT,2BACAa,GADP,IAEIC,UAAU,IAIXD,OAKnB,IAAK,yBACD,OAAO,2BACApC,GADP,IAEImB,MAAOnB,EAAMmB,MAAMZ,KAAI,SAAC6B,GACpB,OAAIA,EAAEvD,KAAOoB,EAAOsB,OACT,2BACAa,GADP,IAEIC,UAAU,IAIXD,OAKnB,IAAK,gCACD,OAAO,2BACApC,GADP,IAGImB,MAAM,YAAKlB,EAAOkB,SAI1B,IAAK,mCACD,OAAO,2BACAnB,GADP,IAEIqB,WAAYpB,EAAOoB,aAI3B,IAAK,6CACD,OAAO,2BACArB,GADP,IAEIsB,oBAAqBrB,EAAOqB,oBAAP,sBACXtB,EAAMsB,qBADK,CACgBrB,EAAOsB,SACtCvB,EAAMsB,oBAAoBnB,QACtB,SAACtB,GAAD,OAAQA,GAAMoB,EAAOsB,YAKvC,QACI,OAAOvB,I,QC/EfrB,EAAiC,CACjC6I,aAAa,GAuBJrI,EACW,iBACf,CACGG,KAAM,+BAeHmI,EArCI,WAGK,IAFpBzH,EAEmB,uDAFXrB,EACRsB,EACmB,uCACnB,OAAQA,EAAOX,MACX,IAAK,6BACD,OAAO,2BACAU,GADP,IAEIwH,aAAa,IAGrB,QACI,OAAOxH,I,kBChBf0H,EAAcC,YAAgB,CAC9BnB,YAAaI,IACbgB,YAAa7H,IACb8H,UAAW1F,IACXK,KAAMsF,IACNC,KAAMC,IACNC,IAAKR,EACLS,cAAeX,IA8BbY,EAAmBC,OAAOC,sCAAwCC,IAC3DC,EAAQC,YACjBd,EACAS,EAAiBM,YAAgBC,O,8FCZtBC,EA5BsB,SAAC,GAA6B,IAA5BpG,EAA2B,EAA3BA,OAAQqG,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAClD,OACI,wBAAQC,UAAWC,IAAEC,OAArB,SACI,sBAAKF,UAAS,kBAAaC,IAAEE,SAA7B,UACI,qBAAKH,UAAWC,IAAEG,YAAaC,IAAI,iFAEnC,qBAAKL,UAAWC,IAAEH,MAAlB,SACKrG,EAEG,gCACI,mBAAGuG,UAAWC,IAAEK,UAAhB,SACKR,IAEL,wBAAQE,UAAWC,IAAEM,aAAcC,QAAST,EAA5C,+CAKJ,cAAC,IAAD,CAASC,UAAWC,IAAEQ,UAAWzG,GAAI,SAArC,0GCVlB0G,E,4JACF,WACI,OAAO,cAAC,EAAD,eAAY5G,KAAKC,Y,GAFFE,IAAML,WAcrBM,eAPO,SAAChD,GACnB,MAAO,CACHuC,OAAQvC,EAAMwC,KAAKD,OACnBqG,MAAO5I,EAAMwC,KAAKoG,SAIc,CAAEC,YAA3B7F,CAAqCwG,G,iBCqD9CC,EAAgB,WAClB,OACI,gCACI,cAAC,IAAD,CACI3G,GAAG,WACHgG,UAAWC,IAAEW,qBACbC,gBAAiBZ,IAAEa,eAHvB,4CAOA,qBAAId,UAAWC,IAAEc,eAAjB,UACI,qBAAIf,UAAWC,IAAEe,cAAjB,UACI,qBACIX,IAAI,wGACJY,IAAI,KAER,8EAEJ,qBAAIjB,UAAWC,IAAEe,cAAjB,UACI,qBACIX,IAAI,qEACJY,IAAI,KAER,8EAEJ,qBAAIjB,UAAWC,IAAEe,cAAjB,UACI,qBACIX,IAAI,iGACJY,IAAI,KAER,+EAaL/G,eANS,SAAChD,GACrB,MAAO,CACHuC,OAAQvC,EAAMwC,KAAKD,UAIZS,EAtHqB,SAAC,GAAgB,IAAdT,EAAa,EAAbA,OACnC,OACI,uBAAOuG,UAAWC,IAAEiB,OAApB,SACI,gCACI,qBAAIlB,UAAWC,IAAEkB,cAAjB,UACI,oBAAInB,UAAWC,IAAEmB,aAAjB,SACI,cAAC,IAAD,CACIpH,GAAG,WACH6G,gBAAiBZ,IAAEa,eAFvB,mFAOJ,oBAAId,UAAWC,IAAEmB,aAAjB,SACI,cAAC,IAAD,CAASpH,GAAG,SAAS6G,gBAAiBZ,IAAEa,eAAxC,mFAIJ,oBAAId,UAAWC,IAAEmB,aAAjB,SACI,cAAC,IAAD,CACIpH,GAAG,aACH6G,gBAAiBZ,IAAEa,eAFvB,2GAOJ,oBAAId,UAAWC,IAAEmB,aAAjB,SACI,cAAC,IAAD,CACIpH,GAAG,WACH6G,gBAAiBZ,IAAEa,eAFvB,wFAYJ,oBAAId,UAAWC,IAAEmB,aAAjB,SACI,cAAC,IAAD,CACIpH,GAAG,UACH6G,gBAAiBZ,IAAEa,eAFvB,wFAOJ,oBAAId,UAAWC,IAAEmB,aAAjB,SACI,cAAC,IAAD,CACIpH,GAAG,gBACH6G,gBAAiBZ,IAAEa,eAFvB,6FAmBR,qBAAKd,UAAWC,IAAEoB,gBAAlB,SACK5H,GAAU,cAAC,EAAD,c,iDCwFhBE,eAhKM,WACjB,OACI,sBAAKqG,UAAWC,IAAEqB,aAAlB,UAII,mBAAGtB,UAAWC,IAAEsB,oBAAhB,yQAGA,qBAAIvB,UAAWC,IAAEuB,MAAjB,UACI,qBAAIxB,UAAWC,IAAEwB,YAAjB,UACI,uBACA,oBAAIzB,UAAWC,IAAEyB,WAAjB,SACI,gDAEJ,uBACA,mBAAG1B,UAAWC,IAAE0B,aAAhB,iBACA,qBAAI3B,UAAWC,IAAE2B,YAAjB,UACI,qBAAI5B,UAAWC,IAAEyB,WAAjB,UACI,0CADJ,2DAIA,oBAAI1B,UAAWC,IAAEyB,WAAjB,gDAGA,oBAAI1B,UAAWC,IAAEyB,WAAjB,gDAGA,oBAAI1B,UAAWC,IAAEyB,WAAjB,wCAGA,oBAAI1B,UAAWC,IAAEyB,WAAjB,kDAKR,qBAAI1B,UAAWC,IAAEwB,YAAjB,UACI,mBAAGzB,UAAWC,IAAE0B,aAAhB,kBACA,qBAAI3B,UAAWC,IAAE2B,YAAjB,UACI,qBAAI5B,UAAWC,IAAEyB,WAAjB,UACI,yCADJ,6BAGA,oBAAI1B,UAAWC,IAAEyB,WAAjB,sFACA,oBAAI1B,UAAWC,IAAEyB,WAAjB,kCACA,oBAAI1B,UAAWC,IAAEyB,WAAjB,2CAKR,qBAAI1B,UAAWC,IAAEwB,YAAjB,UACI,mBAAGzB,UAAWC,IAAE0B,aAAhB,kBACA,qBAAI3B,UAAWC,IAAE2B,YAAjB,UACI,qBAAI5B,UAAWC,IAAEyB,WAAjB,UACI,4CADJ,cAGA,qBAAI1B,UAAWC,IAAEyB,WAAjB,UACI,gDADJ,2BAMZ,mBAAG1B,UAAWC,IAAEsB,oBAAhB,iFACA,qBAAIvB,UAAW6B,IAAG5B,IAAE2B,YAAa3B,IAAE6B,mBAAnC,UACI,qBAAI9B,UAAWC,IAAEyB,WAAjB,UACI,uJADJ,wEAGA,qBAAI1B,UAAWC,IAAEyB,WAAjB,UACI,gIACA,8BACK,IADL,mRAEyD,IACrD,sBAAM1B,UAAWC,IAAE8B,eAAnB,0GAHJ,OAQA,8BACK,IADL,yRAE0D,IACtD,sBAAM/B,UAAWC,IAAE+B,eAAnB,kHAHJ,UASJ,qBAAIhC,UAAWC,IAAEyB,WAAjB,UACI,2JACA,8BACK,IADL,kRAGU,IACN,sBAAM1B,UAAWC,IAAE8B,eAAnB,0GAJJ,OASA,8BACK,IADL,kRAEwD,IACpD,sBAAM/B,UAAWC,IAAE8B,eAAnB,0GAHJ,UASJ,qBAAI/B,UAAWC,IAAEyB,WAAjB,UACI,gKACA,8BACK,IADL,oUAGkB,IACd,sBAAM1B,UAAWC,IAAE+B,eAAnB,qHAIJ,8BACK,IADL,qSAE4D,IACxD,sBAAMhC,UAAWC,IAAE+B,eAAnB,wHAKR,oBAAIhC,UAAWC,IAAEyB,WAAjB,SACI,sJAIR,mBAAG1B,UAAW6B,IAAG5B,IAAEsB,oBAAqBtB,IAAEgC,yBAA1C,oIAGA,oBAAIjC,UAAW6B,IAAG5B,IAAE2B,YAAa3B,IAAE6B,mBAAnC,SACI,oBAAI9B,UAAWC,IAAEyB,WAAjB,SACI,mBACI1B,UAAWC,IAAEiC,mBACbC,OAAO,SACPC,KAAK,+CAHT,8DASR,mBAAGpC,UAAW6B,IAAG5B,IAAEsB,oBAAqBtB,IAAEgC,yBAA1C,kGAGA,oBAAIjC,UAAW6B,IAAG5B,IAAE2B,YAAa3B,IAAE6B,mBAAnC,SACI,oBAAI9B,UAAWC,IAAEyB,WAAjB,SACI,mBACI1B,UAAWC,IAAEiC,mBACbC,OAAO,SACPC,KAAK,4CAHT,iE,kBC9ILzI,eARC,WACZ,OACI,2LCMOA,gBARD,WACV,OACI,2LCMOA,gBARA,WACX,OACI,2L,sECmBF0I,IAlBeC,aAAiB,KACnBC,aAAiB,GAiBRC,aAAU,CAClCvD,KAAM,qBADkBuD,EAfK,SAACzI,GAC9B,OACI,uBAAM0I,SAAU1I,EAAM2I,aAAtB,UACI,gCACI,uBAAOC,QAAQ,YACf,cAACC,GAAA,EAAD,CAAO5C,UAAWC,KAAE4C,eAAgBC,UAAU,WAC1C9M,KAAK,UAAUD,GAAG,UAAUgN,YAAY,4DACxCC,SAAU,CAACC,MAAWC,UAAU,WAGxC,wBAAQlD,UAAS,iBAAYC,KAAEkD,kBAA/B,6FAwBGC,GAfI,SAACrJ,GAOhB,OACI,sBAAKiG,UAAWC,KAAEoD,SAAlB,UACI,mBAAGrD,UAAWC,KAAEqD,gBAAhB,qEACA,cAACjB,GAAD,CAAqBI,SARZ,SAAClI,IACbR,EAAMgC,kBACHhC,EAAM4C,WAAWpC,EAASwD,UAMewF,cAAe,CAAExF,QAAS,Y,sCCsGhEyF,GA3HmB,SAACzJ,GAC/B,MAA8B0J,oBAAS,GAAvC,oBAAKC,EAAL,KAAeC,EAAf,KACA,EAA4BF,mBAAS1J,EAAM6J,SAA3C,oBAAK9H,EAAL,KAAc+H,EAAd,KACA,EAAoCJ,oBAAS,GAA7C,oBAAKK,EAAL,KAAkBC,EAAlB,KAEAC,qBAAU,WACNH,EAAW9J,EAAM6J,WAClB,CAAC7J,EAAM6J,UAEV,IAwBMK,EAAwB,WAC1BF,GAAe,GACfhK,EAAM0C,gBAAe,IAGzB,OACI,qBAAIuD,UAAWC,KAAE7H,KAAjB,WACMsL,GACE,sBAAK1D,UAAWC,KAAEiE,eAAlB,UACI,qBACIlE,UAAWC,KAAEkE,YACb9D,IAAKtG,EAAMY,YAAYc,OAAOC,OAASC,KACvCsF,IAAI,KAER,mBAAGjB,UAAWC,KAAEmE,WAAhB,SAA6BrK,EAAM6J,UACnC,sBAAK5D,UAAWC,KAAEoE,SAAlB,UACI,qBACIrE,UAAWC,KAAEqE,iBACb9D,QA1CC,WAChBzG,EAAMgC,mBACP4H,GAAY,GACZ5J,EAAM0C,gBAAe,KAqCT,0EAMA,qBACIuD,UAAW6B,IACP5B,KAAEqE,iBACFrE,KAAEsE,uBAEN/D,QAlCI,WACnBzG,EAAMgC,mBACPgI,GAAe,GACfhK,EAAM0C,gBAAe,KA0BT,8DAUCqH,GACG,sBACI9D,UAAWC,KAAEuE,mBACbC,OAAQR,EACRS,SAAU,EAHd,UAKI,mBAAG1E,UAAWC,KAAE0E,eAAhB,8FAGA,sBAAK3E,UAAWC,KAAE2E,iBAAlB,UACI,qBACIpE,QAAS,kBACLzG,EAAM0D,WAAW1D,EAAMhE,KAF/B,gCAOA,qBAAKyK,QAASyD,EAAd,sCAUvBP,GACG,sBAAK1D,UAAWC,KAAE4E,aAAlB,UACI,qBACI7E,UAAWC,KAAEkE,YACb9D,IAAKtG,EAAMY,YAAYc,OAAOC,MAC9BuF,IAAI,KAER,sBAAKjB,UAAWC,KAAE6E,wBAAlB,UACKhJ,EACD,0BACIkE,UAAWC,KAAE8E,eACbC,SAjFH,SAACC,GAClBpB,EAAWoB,EAAEC,cAAcC,QAiFPjC,UAAW,IACXiC,MAAOrJ,EACPsJ,WAAW,EACXC,QAAS,SAAUJ,GACf,IAAIK,EAAML,EAAE9C,OAAOgD,MACnBF,EAAE9C,OAAOgD,MAAQ,GACjBF,EAAE9C,OAAOgD,MAAQG,QAI7B,qBAAKtF,UAAWC,KAAEoE,SAAlB,SACI,qBAAK7D,QAnGE,WACvBmD,GAAY,GACZ5J,EAAM0C,gBAAe,GACrB1C,EAAM8D,WAAW9D,EAAMhE,GAAI+F,IAgGX,uE,qBClGTyJ,GAnBoB,SAACxL,GAChC,IAAIyL,EAAgB,YAAIzL,EAAM8B,OACzB4J,UACAhO,KAAI,SAACyG,GAAD,OACD,cAAC,GAAD,CACIvD,YAAaZ,EAAMY,YACnBiJ,QAAS1F,EAAEpC,QACX2B,WAAY1D,EAAM0D,WAClBI,WAAY9D,EAAM8D,WAClBpB,eAAgB1C,EAAM0C,eACtBV,iBAAkBhC,EAAMgC,iBAExBhG,GAAImI,EAAEnI,IADDmI,EAAEnI,OAKnB,OAAO,oBAAIiK,UAAWC,KAAEpE,MAAjB,SAAyB2J,K,wCCsBrBE,GA1CqCzL,IAAM0L,MAAK,SAAC5L,GAE5D,MAA8B0J,oBAAS,GAAvC,oBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAAS1J,EAAMK,QAAzC,oBAAKA,EAAL,KAAawL,EAAb,KAEA5B,qBAAU,gBACe6B,IAAjB9L,EAAMK,QACNwL,EAAU7L,EAAMK,UAErB,CAACL,EAAMK,SAkBV,OACI,sBAAK4F,UAAWC,KAAE6F,cAAlB,WACOpC,GACC,mBAAG1D,UAAWC,KAAE8F,2BAA4BvF,QAnB/B,WACjBzG,EAAMiM,SACNrC,GAAY,IAiBR,SAAwE5J,EAAMK,SAEhFsJ,GACE,uBAAOsB,SAVI,SAACC,GACpBW,EAAUX,EAAEC,cAAcC,QASejC,UAAW,GAAIkC,WAAW,EAAMX,OAhBlD,WACvBd,GAAY,GAEZ5J,EAAM+C,iBAAiB1C,IAeX4F,UAAWC,KAAEgG,qBAAsBd,MAAO/K,U,oBC2CxD8L,GAAsC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACzD,OACI,sBAAKpG,UAAWC,KAAEoG,qBAAlB,UACI,uBAAMrG,UAAWC,KAAEqG,0BAAnB,UACKH,EADL,WAGA,sBAAMnG,UAAWC,KAAEsG,0BAAnB,SACI,mBAAGpE,OAAO,SAASC,KAAMgE,EAAzB,SACKA,UAONI,GAzF0B,SAAC,GAOnC,IANH7L,EAME,EANFA,YACAP,EAKE,EALFA,OACA4L,EAIE,EAJFA,QACAS,EAGE,EAHFA,aACA5J,EAEE,EAFFA,cACAC,EACE,EADFA,iBAEA,OACI,sBAAKkD,UAAWC,KAAEyG,kBAAlB,UACI,sBAAK1G,UAAWC,KAAE0G,sBAAlB,UACI,sBAAK3G,UAAWC,KAAE2G,kBAAlB,UACK,IACAjM,EAAYa,SAAU,OAG3B,qBAAKwE,UAAWC,KAAE4G,sBAAlB,SACI,cAAC,GAAD,CACIzM,OAAQA,EACRyC,cAAeA,EACfC,iBAAkBA,EAClBkJ,QAASA,MAIjB,sBAAKhG,UAAWC,KAAE4G,sBAAlB,UACI,sBAAM7G,UAAWC,KAAE6G,KAAnB,sFACCnM,EAAYW,eAAiB,qBAAQ,kBAG1C,sBAAK0E,UAAWC,KAAE4G,sBAAlB,UACI,mBAAG7G,UAAWC,KAAE6G,KAAhB,4EACCnM,EAAYY,6BAGjB,sBAAKyE,UAAWC,KAAE4G,sBAAlB,UACI,mBAAG7G,UAAWC,KAAE6G,KAAhB,0DACCnM,EAAYC,WAGhBoL,GACG,8BACI,wBACIhG,UAAWC,KAAE8G,oBACbvG,QAASiG,EAFb,0HAUZ,sBAAKzG,UAAWC,KAAE+G,sBAAlB,UACI,qBAAKhH,UAAWC,KAAEgH,2BAAlB,+DACCC,OAAOC,KAAKxM,EAAYE,UAAUpD,KAAI,SAAC2P,GACpC,OACI,cAAC,GAAD,CACIjB,aAAciB,EAEdhB,aAAczL,EAAYE,SAASuM,IAC9BA,a,oBC+ClBC,GALc7E,aAAU,CAAEvD,KAAK,gBAAjBuD,EApGgB,SAAC,GAQvC,IAPHE,EAOE,EAPFA,aACA/H,EAME,EANFA,YACAP,EAKE,EALFA,OACAkN,EAIE,EAJFA,MACAtB,EAGE,EAHFA,QACAnJ,EAEE,EAFFA,cACAC,EACE,EADFA,iBAEA,OACI,uBAAMkD,UAAWC,KAAEsH,kBAAmB9E,SAAUC,EAAhD,UACI,sBAAK1C,UAAWC,KAAEuH,sBAAlB,UACI,8BACI,cAAC5E,GAAA,EAAD,CACI5C,UAAWC,KAAE2G,kBACb5Q,KAAK,WACL+M,YAAY,yCACZD,UAAU,YAIlB,qBAAK9C,UAAWC,KAAE4G,sBAAlB,SACI,cAAC,GAAD,CACIzM,OAAQA,EACRyC,cAAeA,EACfC,iBAAkBA,EAClBkJ,QAASA,MAIjB,sBAAKhG,UAAWC,KAAEwH,sBAAlB,UACI,sBAAMzH,UAAWC,KAAE6G,KAAnB,sFACA,cAAClE,GAAA,EAAD,CACI5C,UAAWC,KAAEyH,2BACb1R,KAAK,iBACL8M,UAAU,QACVtM,KAAK,WACLT,GAAG,mBAEP,uBACIiK,UAAWC,KAAE0H,2BACbhF,QAAQ,sBAIhB,sBAAK3C,UAAWC,KAAE4G,sBAAlB,UACI,qBAAK7G,UAAWC,KAAE6G,KAAlB,4EACA,cAAClE,GAAA,EAAD,CACI5C,UAAWC,KAAE2H,2BACb5R,KAAK,4BACL8M,UAAU,aAIlB,sBAAK9C,UAAWC,KAAE4G,sBAAlB,UACI,qBAAK7G,UAAWC,KAAE6G,KAAlB,0DACA,cAAClE,GAAA,EAAD,CACI5C,UAAWC,KAAE2H,2BACb5R,KAAK,UACL8M,UAAU,aAIlB,8BACI,wBACItM,KAAK,SACLwJ,UAAS,UAAKC,KAAE8G,oBAAP,YAA8B9G,KAAE4H,yBAF7C,+FAQJ,8BACKP,GAAS,qBAAKtH,UAAWC,KAAE6H,gBAAlB,SAAoCR,SAItD,sBAAKtH,UAAWC,KAAE8H,0BAAlB,UACI,qBAAK/H,UAAWC,KAAEgH,2BAAlB,+DACCC,OAAOC,KAAKxM,EAAYE,UAAUpD,KAAI,SAAC2P,GACpC,OACI,sBAAKpH,UAAWC,KAAEoG,qBAAlB,UACI,uBAAMrG,UAAWC,KAAEqG,0BAAnB,UACKc,EADL,WAGA,cAACxE,GAAA,EAAD,CACI5C,UAAWC,KAAEsG,0BACbvQ,KAAM,YAAcoR,EACpBrE,YAAaqE,EACbtE,UAAU,SACLsE,kBCNtBY,GAlF0B/N,IAAM0L,MAAK,SAAC5L,GACjD,MAA8B0J,oBAAS,GAAvC,oBAAKC,EAAL,KAAeC,EAAf,KAkBA,OACI,gCACI,qBAAK3D,UAAWC,KAAEgI,aAAlB,SACI,qBACIjI,UAAWC,KAAEiI,kBACb7H,IAAI,gEAGZ,sBAAKL,UAAWC,KAAEtF,YAAlB,UACI,sBAAKqF,UAAWC,KAAEkI,0BAAlB,UACI,qBACInI,UAAWC,KAAEmI,wBACb/H,IAAKtG,EAAMY,YAAYc,OAAOG,OAASD,OAE3C,8BACK5B,EAAMiM,SACH,sBAAKhG,UAAWC,KAAEoI,eAAlB,UACI,uBACIrI,UAAWC,KAAEqI,YAEbtD,SAnCJ,SAACC,GAErBA,EAAE9C,OAAOoG,MAAMzR,QAEfiD,EAAMgD,YAAYkI,EAAE9C,OAAOoG,MAAM,KAgCT/R,KAAK,OACLR,KAAK,OACLD,GAAG,gBAEP,wBACIiK,UAAWC,KAAEuI,kBACb7F,QAAQ,cAFZ,UAII,sBAAM3C,UAAWC,KAAEwI,kBACnB,sBAAMzI,UAAWC,KAAEyI,sBAAnB,4FASnBhF,EACG,cAAC,GAAD,2BACQ3J,GADR,IAGI8C,cAAe9C,EAAM8C,cACrBC,iBAAkB/C,EAAM+C,iBACxB2F,SApDH,SAAClI,GAEdR,EAAMoD,YAAY5C,GAAUvC,MAAK,WAC7B2L,GAAY,OAkDAJ,cAAexJ,EAAMY,eAGzB,cAAC,GAAD,2BACQZ,GADR,IAEI8C,cAAe9C,EAAM8C,cACrBC,iBAAkB/C,EAAM+C,iBACxB2J,aAAc,WACV9C,GAAY,gBCzBzBgF,GArCsB,SAAC5O,GAKlC,OAJAiK,qBAAU,WACNjK,EAAM0C,gBAAe,KACtB,IAGC,0BAASuD,UAAWC,KAAEvF,QAAtB,UACI,cAAC,GAAD,CACIC,YAAaZ,EAAMY,YACnBP,OAAQL,EAAMK,OACdyC,cAAe9C,EAAM8C,cACrBC,iBAAkB/C,EAAM+C,iBACxBkJ,QAASjM,EAAMiM,QACfjJ,YAAahD,EAAMgD,YACnBI,YAAapD,EAAMoD,cAEtBpD,EAAMiM,SACH,gCACI,cAAC,GAAD,CACIrJ,WAAY5C,EAAM4C,WAClBF,eAAgB1C,EAAM0C,eACtBV,iBAAkBhC,EAAMgC,mBAE5B,cAAC,GAAD,CACIF,MAAO9B,EAAM8B,MACblB,YAAaZ,EAAMY,YACnB8C,WAAY1D,EAAM0D,WAClBI,WAAY9D,EAAM8D,WAClBpB,eAAgB1C,EAAM0C,eACtBV,iBAAkBhC,EAAMgC,0BCe1C6M,G,oKACF,WACI,IAAInQ,EAASqB,KAAKC,MAAM8O,MAAMC,OAAOrQ,OAEhCA,IACDA,EAASqB,KAAKC,MAAMgP,kBAGxBjP,KAAKC,MAAM6C,eAAenE,GAC1BqB,KAAKC,MAAM8C,cAAcpE,K,+BAG7B,WACIqB,KAAKkP,mB,gCAGT,SAAmBC,GACXnP,KAAKC,MAAM8O,MAAMC,OAAOrQ,QAAUwQ,EAAUJ,MAAMC,OAAOrQ,QACzDqB,KAAKkP,mB,oBAIb,WACI,OACI,cAAC,GAAD,2BACQlP,KAAKC,OADb,IAEIiM,SAAUlM,KAAKC,MAAM8O,MAAMC,OAAOrQ,c,GA1BnBwB,IAAML,WA+CtB4F,eACXtF,aAfkB,SAAChD,GACnB,MAAO,CACHyD,YAAazD,EAAMwG,YAAY/C,YAC/BP,OAAQlD,EAAMwG,YAAYtD,OAC1ByB,MAAO3E,EAAMwG,YAAY7B,MAEzBkN,iBAAkB7R,EAAMwC,KAAKjB,OAC7BgB,OAAQvC,EAAMwC,KAAKD,OACnBsC,iBAAkB7E,EAAMwG,YAAY3B,oBASpC,CACIG,eAAgB7F,IAAQ6F,eACxBO,eAAgBpG,IAAQoG,eACxBE,eACAC,mBACAC,kBACAC,qBACAC,gBACAI,gBACAM,eACAI,iBAGRqL,IACAvP,IAjBW6F,CAkBboJ,IChIajP,gBARA,WACX,OACI,2LCMOA,gBARE,WACb,OACI,2L,sCCqHOwP,GA9GwB,SAACpP,GACpCiK,qBAAU,kBAAM1F,MAAiB,IAEjC,IAAIA,EAAgB,WACW,IAAvBvE,EAAM1B,MAAMvB,QACZiD,EAAMuE,cAAc,CAChB,CACIvI,GAAI,EACJwD,UAAU,EACV6P,OAAQ,iDACR5N,SAAU,2BACVpB,OAAQ,sPACRiP,SAAU,CACNC,KAAM,2BACNC,QAAS,+CAGjB,CACIxT,GAAI,EACJwD,UAAU,EACV6P,OAAQ,mHACR5N,SAAU,SACVpB,OAAQ,6BACRiP,SAAU,CACNC,KAAM,8CACNC,QAAS,uBAGjB,CACIxT,GAAI,EACJwD,UAAU,EACV6P,OAAQ,iFACR5N,SAAU,yDACVpB,OAAQ,yQACRiP,SAAU,CACNC,KAAM,uCACNC,QAAS,qDAGjB,CACIxT,GAAI,EACJwD,UAAU,EACV6P,OAAQ,qFACR5N,SAAU,6CACVpB,OAAQ,mLACRiP,SAAU,CACNC,KAAM,2BACNC,QAAS,kDAO7B,OACI,yBAASvJ,UAAWC,KAAE5H,MAAtB,SACI,8BACK0B,EAAM1B,MAAMZ,KAAI,SAAC6B,GAAD,OACb,sBAAgB0G,UAAWC,KAAEuJ,YAA7B,UACI,sBAAKxJ,UAAWC,KAAEwJ,WAAlB,UACI,qBAAKpJ,IAAK/G,EAAE8P,OAAQnI,IAAI,KACxB,8BACK3H,EAAEC,SACC,yBACIiH,QAAS,WACLzG,EAAMd,SAASK,EAAEvD,KAErBiK,UAAS,UAAKC,KAAEyJ,wBAAP,YAAkCzJ,KAAE0J,cAApC,WAJb,UAMI,sBAAM3J,UAAWC,KAAE2J,OAAnB,wDAGA,sBAAM5J,UAAWC,KAAE4J,MAAnB,mFAKJ,wBACIrJ,QAAS,WACLzG,EAAMX,OAAOE,EAAEvD,KAEnBiK,UAAS,UAAKC,KAAE6J,sBAAP,YAAgC7J,KAAE0J,cAAlC,WAJb,qFAYZ,sBAAK3J,UAAWC,KAAE8J,YAAlB,UACI,sBAAK/J,UAAWC,KAAE+J,eAAlB,UACI,mBAAGhK,UAAWC,KAAEgK,YAAhB,SAA8B3Q,EAAEkC,WAChC,oBAAGwE,UAAWC,KAAEiK,YAAhB,UACK5Q,EAAE+P,SAASC,KADhB,UAIJ,sBAAKtJ,UAAWC,KAAEkK,kBAAlB,UACI,mBAAGnK,UAAWC,KAAEmK,cAAhB,SAAgC9Q,EAAEc,SAClC,mBAAG4F,UAAWC,KAAEoK,eAAhB,SACK/Q,EAAE+P,SAASE,kBAzClBjQ,EAAEvD,YCpC1BuU,G,4JACF,WACI,OACI,gCACKxQ,KAAKC,MAAMxB,WAAa,cAACgS,GAAA,EAAD,IAAgB,KACzC,cAAC,GAAD,CACIlS,MAAOyB,KAAKC,MAAM1B,MAClBY,SAAUa,KAAKC,MAAMd,SACrBG,OAAQU,KAAKC,MAAMX,OACnBkF,cAAexE,KAAKC,MAAMuE,uB,GATbrE,IAAML,WAyBxB4F,eACXtF,aATkB,SAAChD,GACnB,MAAO,CACHmB,MAAOmS,aAAStT,GAChBqB,WAAYkS,aAAmBvT,GAC/BsB,oBAAqBkS,aAA4BxT,MAK5B,CACrB+B,StBmEJ,SAACR,GAAD,8CACA,WAAO5B,GAAP,SAAA+B,EAAA,sDACI/B,EAASR,EAAQmI,2BAA0B,EAAM/F,KAElC,EAEf5B,EAASR,EAAQmI,2BAA0B,EAAO/F,IAE9C5B,EAASR,EAAQgI,eAAe5F,IAPxC,2CADA,uDsBlEIW,OtB+EJ,SAACX,GAAD,8CACA,WAAO5B,GAAP,SAAA+B,EAAA,sDACI/B,EAASR,EAAQmI,2BAA0B,EAAM/F,KAElC,EAEf5B,EAASR,EAAQmI,2BAA0B,EAAO/F,IAE9C5B,EAASR,EAAQ+H,aAAa3F,IAPtC,2CADA,uDsB9EI6F,cAAejI,EAAQiI,gBAE3B3E,IANW6F,CAOb8K,IC5CIK,GAAmB1Q,IAAM2Q,MAAK,kBAAM,iCACpCC,GAAiB5Q,IAAM2Q,MAAK,kBAAM,iCAClCE,GAAQ7Q,IAAM2Q,MAAK,kBAAM,iCA0ChBG,GAxCC,WACZ,OACI,qBAAK/K,UAAWC,IAAE+K,QAAlB,SACI,cAAC,WAAD,CAAUC,SAAU,8GAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAM,cAAC,IAAD,CAAUpR,GAAG,gBAE/B,cAAC,IAAD,CAAOmR,KAAK,SAASC,OAAQ,kBAAM,cAACN,GAAD,OACnC,cAAC,IAAD,CACIK,KAAK,oBACLC,OAAQ,kBAAM,cAAC,GAAD,OAElB,cAAC,IAAD,CACID,KAAK,sBACLC,OAAQ,kBAAM,cAACT,GAAD,OAElB,cAAC,IAAD,CAAOQ,KAAK,SAASC,OAAQ,kBAAM,cAACP,GAAD,OACnC,cAAC,IAAD,CACIM,KAAK,aACLC,OAAQ,kBAAM,cAAC,GAAD,OAElB,cAAC,IAAD,CAAOD,KAAK,UAAUC,OAAQ,kBAAM,cAAC,GAAD,OACpC,cAAC,IAAD,CAAOD,KAAK,UAAUC,OAAQ,kBAAM,cAAC,GAAD,OACpC,cAAC,IAAD,CACID,KAAK,gBACLC,OAAQ,kBAAM,cAAC,EAAD,OAElB,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,OA5BzC,IA6BI,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,0D,qBC3CnCC,G,4JAVX,WACI,OACI,sBAAKrL,UAAS,UAAKC,KAAEqL,KAAP,YAAd,UACI,cAAC,EAAD,IACA,cAAC,GAAD,W,GALGrR,IAAML,WCsBnB2R,G,uKACF,WACIzR,KAAKC,MAAMyR,kB,oBAGf,WACI,OAAK1R,KAAKC,MAAM2E,YAKZ,sBAAKsB,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,GAAD,OANG,cAACuK,GAAA,EAAD,Q,GAPD3Q,aAyBH4F,eACX0J,IACAhP,aARoB,SAAChD,GAAD,MAA6C,CACjEwH,YAAaxH,EAAMiI,IAAIT,eASnB,CACI8M,cxBdiB,kBAAsB,SAAC3U,GAChD,IAAI4U,EAAU5U,EAAS6U,eAEvBnO,QAAQoO,IAAI,CAACF,IAAUzT,MAAK,WACxBnB,EAASR,YwBKFmJ,CAQb+L,ICnDEK,I,OAAmB,WACnBC,IAAST,OACL,cAAC,IAAMU,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUrM,MAAOA,EAAjB,SACI,cAAC,GAAD,UAIZsM,SAASC,eAAe,WAKhCJ,KAIAnM,EAAMwM,WAAU,WACZL,S,mBC3BJlU,EAAOC,QAAU,CAAC,aAAe,kCAAkC,kBAAoB,uCAAuC,YAAc,iCAAiC,0BAA4B,+CAA+C,wBAA0B,6CAA6C,eAAiB,oCAAoC,YAAc,iCAAiC,kBAAoB,uCAAuC,gBAAkB,qCAAqC,sBAAwB,6C,mBCA7iBD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,YAAc,4BAA4B,MAAQ,sBAAsB,UAAY,0BAA0B,aAAe,6BAA6B,UAAY,4B,gCCD3O,QAA0B,0C,2NC2B5BuU,EAAU,WAEf,OAAO3W,IAASwC,IAAT,WAAwCC,MAAK,SAACC,GAAD,OAASA,EAAIC,SAF5DgU,EAAU,SAKfC,EACAC,EACAC,GAED,IADCC,EACF,uDADY,KAEV,OAAO/W,IACF6C,KADE,aACoC,CACnC+T,QACAC,WACAC,aACAC,YAEHtU,MAAK,SAACC,GAAD,OAASA,EAAIC,SAjBlBgU,EAAU,WAoBf,OAAO3W,IACF4C,OADE,cAEFH,MAAK,SAACC,GAAD,OAASA,EAAIC,SC1ClBqU,EAAc,WAEnB,OAAOhX,IACFwC,IADE,4BAEFC,MAAK,SAACC,GAAD,OAASA,EAAIC,SCF3BrC,EAAe,CACf4C,OAAQ,KACR0T,MAAO,KACPrM,MAAO,KACPrG,QAAQ,EACR+S,WAAY,MAwBHnW,EACQ,SACboC,EACA0T,EACArM,GAHa,IAIbrG,IAJa,+DAKX,CACFjD,KAAM,6BACNiW,QAAS,CACLhU,SACA0T,QACArM,QACArG,YAZCpD,EAea,SAACmW,GAAD,MAAgC,CAClDhW,KAAM,kCACNiW,QAAS,CACLD,gBAQCd,EAAkB,yDAAiB,WAAO7U,GAAP,uBAAA+B,EAAA,sEACrBsT,IADqB,QACtCrT,EADsC,QAG/BK,aAAe7D,IAAY8D,UAAU,EACnBN,EAASX,KAA9BnC,EADuC,EACvCA,GAAIoW,EADmC,EACnCA,MAAOrM,EAD4B,EAC5BA,MACjBjJ,EAASR,EAAwBN,EAAIoW,EAAOrM,KALJ,2CAAjB,uDASlBA,EACT,SACIqM,EACAC,EACAC,EACAC,GAJJ,8CAMA,WAAOzV,GAAP,iBAAA+B,EAAA,sEAC2BsT,EACnBC,EACAC,EACAC,EACAC,GALR,QACUzT,EADV,QAQiBK,aAAe7D,IAAY8D,SACpCtC,EAAS6U,KACTrV,EAA6B,QAGzBwC,EAASK,aAAe5D,IAAqBoX,mBAE7C7V,EAAS8V,KAGT7Q,EACAjD,EAAS3C,SAASY,OAAS,EACrB+B,EAAS3C,SAAS,GAClB,aAEVW,EAEIwG,YAAW,QAAS,CAChBC,OAAQxB,MA1BxB,2CANA,uDAsCSiE,EAAS,yDAAiB,WAAOlJ,GAAP,SAAA+B,EAAA,sEACZsT,IADY,cAGtBhT,aAAe7D,IAAY8D,SACpCtC,EAASR,EAAwB,KAAM,KAAM,MAAM,IAJpB,2CAAjB,uDAQTsW,EAAgB,yDAAiB,WAAO9V,GAAP,iBAAA+B,EAAA,sEACnB2T,IADmB,OACpC1T,EADoC,OAEpC2T,EAAa3T,EAAS+T,IAE5B3P,QAAQC,IAAI,0FAAsBsP,GAElC3V,EAASR,EAA6BmW,IANI,2CAAjB,uDASdxN,IA/GK,WAGI,IAFpB9H,EAEmB,uDAFXrB,EACRsB,EACmB,uCACnB,OAAQA,EAAOX,MACX,IAAK,6BACL,IAAK,kCACD,OAAO,2BACAU,GACAC,EAAOsV,SAGlB,QACI,OAAOvV,K,kBC9BnBQ,EAAOC,QAAU,CAAC,aAAe,mCAAmC,oBAAsB,0CAA0C,MAAQ,4BAA4B,YAAc,kCAAkC,aAAe,mCAAmC,WAAa,iCAAiC,kBAAoB,wCAAwC,eAAiB,qCAAqC,eAAiB,qCAAqC,wBAA0B,8CAA8C,mBAAqB,2C,mBCA7jBD,EAAOC,QAAU,CAAC,SAAW,0BAA0B,gBAAkB,iCAAiC,eAAiB,gCAAgC,iBAAmB,oC,gCCC9K,sGAAO,IAAMsL,EAA+B,SAACkC,GACzC,IAAIA,EACJ,MAAO,qBAKE5C,EAAwC,SAACsK,GAAD,OAAe,SAAC1H,GACjE,GAAIA,EAAMrO,OAAS+V,EACf,MAAM,iBAAN,OAAwBA,EAAxB,cAKKvK,EAAwC,SAACY,GAAD,OAAe,SAACiC,GACjE,GAAIA,EAAMrO,OAASoM,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,oGCdKqH,EAAY,WACrB,OACI,sBAAKvK,UAAWC,IAAE6M,UAAlB,UACI,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,wBAAW,6B,gCCLrI,kTACO,IAAMC,EAAW,SAAC7V,GACrB,OAAOA,EAAM6H,UAAU1G,OAGd2U,EAAc,SAAC9V,GACxB,OAAOA,EAAM6H,UAAUjH,UAGdmV,EAAqB,SAAC/V,GAC/B,OAAOA,EAAM6H,UAAUzG,iBAGd4U,EAAiB,SAAChW,GAC3B,OAAOA,EAAM6H,UAAUlH,aAGdsV,EAAgB,SAACjW,GAC1B,OAAOA,EAAM6H,UAAUxG,YAGd6U,EAAyB,SAAClW,GACnC,OAAOA,EAAM6H,UAAUvG,qBAIdgS,EAAW,SAACtT,GACrB,OAAOA,EAAMkI,cAAc/G,OAGlBoS,EAAqB,SAACvT,GAC/B,OAAOA,EAAMkI,cAAc7G,YAGlBmS,EAA8B,SAACxT,GACxC,OAAOA,EAAMkI,cAAc5G,sB,mBCpC/Bd,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,2BAA6B,kDAAkD,qBAAuB,+C","file":"static/js/main.604a7d58.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '18021664-8191-4731-8d37-bfc58504d56d',\r\n    },\r\n})\r\n\r\nexport enum ResultCodes {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n","import { DialogType, DialogMessagesType } from './../types/types'\r\nimport { FormAction, reset } from 'redux-form'\r\nimport { BaseLocalThunkType, InferActionsTypes } from './redux-store'\r\n\r\n//State\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Михайло',\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Віка',\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Софія',\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Іван',\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Клара',\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Христина',\r\n        },\r\n        {\r\n            id: 7,\r\n            name: 'Давид',\r\n        },\r\n        {\r\n            id: 8,\r\n            name: 'Ігор',\r\n        },\r\n        {\r\n            id: 9,\r\n            name: 'Інна',\r\n        },\r\n        {\r\n            id: 10,\r\n            name: 'Аліна',\r\n        },\r\n        {\r\n            id: 11,\r\n            name: 'Наталя',\r\n        },\r\n        {\r\n            id: 12,\r\n            name: 'Ірина',\r\n        },\r\n        {\r\n            id: 13,\r\n            name: 'Тетяна',\r\n        },\r\n        {\r\n            id: 14,\r\n            name: 'Володимир',\r\n        },\r\n        {\r\n            id: 15,\r\n            name: 'Віталій',\r\n        },\r\n        {\r\n            id: 16,\r\n            name: 'Олександр',\r\n        },\r\n        {\r\n            id: 17,\r\n            name: 'Валерій',\r\n        },\r\n        {\r\n            id: 18,\r\n            name: 'Святослав',\r\n        },\r\n        {\r\n            id: 19,\r\n            name: 'Петро',\r\n        },\r\n    ] as Array<DialogType>,\r\n    dialogsMessages: [\r\n        {\r\n            id: 0,\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'вело-радник',\r\n                    messagesText:\r\n                        'Виберіть діалог зі списку контактів щоби почати спілкування.',\r\n                },\r\n            ],\r\n            newMessageText: '',\r\n        },\r\n        {\r\n            id: 1,\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Михайло',\r\n                    messagesText: 'Здаров! Вже замінив колесо?',\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Я',\r\n                    messagesText: 'Привіт.',\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: 'Я',\r\n                    messagesText:\r\n                        'Так вже відремонтував і встановив нові катафоти!',\r\n                },\r\n                {\r\n                    id: 4,\r\n                    name: 'Михайло',\r\n                    messagesText:\r\n                        'Тоді завтра на 10:30 їдемо 20км по маршруту Б.',\r\n                },\r\n                {\r\n                    id: 5,\r\n                    name: 'Я',\r\n                    messagesText: 'ОК',\r\n                },\r\n                {\r\n                    id: 6,\r\n                    name: 'Михайло',\r\n                    messagesText: 'До зустрічі.',\r\n                },\r\n            ],\r\n            newMessageText: '',\r\n        },\r\n        {\r\n            id: 2,\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Віка',\r\n                    messagesText: 'Привіт! Коли їдемо на стадіон?',\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Я',\r\n                    messagesText:\r\n                        'Привіт. Ще маю трохи повчити react, потім їдемо!',\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: 'Віка',\r\n                    messagesText: 'Добре, після дощу їдемо 10км по парку.',\r\n                },\r\n            ],\r\n            newMessageText: '',\r\n        },\r\n        {\r\n            id: 3,\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Софія',\r\n                    messagesText: 'Привіт. А коли змагання на велотреку?',\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Я',\r\n                    messagesText: 'Здається в суботу.',\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: 'Я',\r\n                    messagesText: 'але треба перевірити..',\r\n                },\r\n            ],\r\n            newMessageText: '',\r\n        },\r\n        {\r\n            id: 4,\r\n            messages: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Іван',\r\n                    messagesText: 'Друже, в тебе десь був запасний підшипник?',\r\n                },\r\n            ],\r\n            newMessageText: '',\r\n        },\r\n    ] as Array<DialogMessagesType>,\r\n}\r\n\r\n//Reducer\r\nconst dialogsReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VF/DIALOGS/ADD_MESSAGE': {\r\n            let dialogsMessagesItemAvaileble = [\r\n                ...state.dialogsMessages.filter(\r\n                    (dm) => dm.id == action.dialogId\r\n                ),\r\n            ]\r\n            let id = +`${dialogsMessagesItemAvaileble[0].messages.length + 1}`\r\n            // let id = +`${Math.max(dialogsMessagesItemAvaileble[0].messages.map( (p)=> p.id ))}`;\r\n\r\n            let newMessage = {\r\n                id: +id,\r\n                name: 'Я',\r\n                messagesText: action.newMessageText,\r\n            }\r\n\r\n            let dialogsMessagesMockup = {\r\n                id: action.dialogId,\r\n                messages: [newMessage],\r\n                newMessageText: '',\r\n            }\r\n\r\n            if (dialogsMessagesItemAvaileble.length > 0) {\r\n                return {\r\n                    ...state,\r\n                    dialogsMessages: [\r\n                        ...state.dialogsMessages.map((dm) => {\r\n                            return dm.id == action.dialogId\r\n                                ? {\r\n                                      ...dm,\r\n                                      messages: [...dm.messages, newMessage],\r\n                                  }\r\n                                : dm\r\n                        }),\r\n                    ],\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    dialogsMessages: [\r\n                        ...state.dialogsMessages,\r\n                        dialogsMessagesMockup,\r\n                    ],\r\n                }\r\n            }\r\n        }\r\n\r\n        case 'VF/DIALOGS/REFRESH_CURRENT_TEXT_OF_MESSAGE': {\r\n            return {\r\n                ...state,\r\n                dialogsMessages: [\r\n                    ...state.dialogsMessages.map((dm) => {\r\n                        return dm.id == action.dialogId\r\n                            ? {\r\n                                  ...dm,\r\n                                  newMessageText: '',\r\n                              }\r\n                            : dm\r\n                    }),\r\n                ],\r\n            }\r\n        }\r\n\r\n        case 'VF/DIALOGS/SET_CURRENT_TEXT_OF_MESSAGE': {\r\n            let dialogsMessagesItemAvaileble = [\r\n                ...state.dialogsMessages.filter(\r\n                    (dm) => dm.id == action.dialogId\r\n                ),\r\n            ]\r\n\r\n            let dialogsMessagesMockup = {\r\n                id: action.dialogId,\r\n                messages: [],\r\n                newMessageText: action.currentTextOfMessage,\r\n            }\r\n\r\n            if (dialogsMessagesItemAvaileble.length > 0) {\r\n                return {\r\n                    ...state,\r\n                    dialogsMessages: [\r\n                        ...state.dialogsMessages.map((dm) => {\r\n                            return dm.id == action.dialogId\r\n                                ? {\r\n                                      ...dm,\r\n                                      newMessageText:\r\n                                          action.currentTextOfMessage,\r\n                                  }\r\n                                : dm\r\n                        }),\r\n                    ],\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    dialogsMessages: [\r\n                        ...state.dialogsMessages,\r\n                        dialogsMessagesMockup,\r\n                    ],\r\n                }\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC Types\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addMessage: (newMessageText: string, dialogId: number) =>\r\n        ({\r\n            type: 'VF/DIALOGS/ADD_MESSAGE',\r\n            newMessageText: newMessageText,\r\n            dialogId: dialogId,\r\n        } as const),\r\n    refreshCurrentTextOfMessage: (dialogId: number) =>\r\n        ({\r\n            type: 'VF/DIALOGS/REFRESH_CURRENT_TEXT_OF_MESSAGE',\r\n            dialogId: dialogId,\r\n        } as const),\r\n    setCurrentTextOfMessage: (currentTextOfMessage: string, dialogId: number) =>\r\n        ({\r\n            type: 'VF/DIALOGS/SET_CURRENT_TEXT_OF_MESSAGE',\r\n            currentTextOfMessage: currentTextOfMessage,\r\n            dialogId: dialogId,\r\n        } as const),\r\n}\r\n\r\n//TC Type\r\ntype LocalThunkType = BaseLocalThunkType<ActionsTypes | FormAction>\r\n\r\nexport const addNewMessage =\r\n    (newMessageText: string, dialogId: number): LocalThunkType =>\r\n    (dispatch) => {\r\n        if (newMessageText.length > 0) {\r\n            dispatch(actions.addMessage(newMessageText, dialogId))\r\n            dispatch(actions.refreshCurrentTextOfMessage(dialogId))\r\n            dispatch(reset('DialogsAddNewMessage'))\r\n        }\r\n    }\r\n\r\nexport const resetNewMessageField = (): LocalThunkType => (dispatch) => {\r\n    dispatch(reset('DialogsAddNewMessage'))\r\n}\r\n\r\nexport default dialogsReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo__Form\":\"ProfileDataForm_profileInfo__Form__j1yhs\",\"profileInfo__FormLeft\":\"ProfileDataForm_profileInfo__FormLeft__DEw8P\",\"profileInfo__Name\":\"ProfileDataForm_profileInfo__Name__2DQ7w\",\"profileInfo__Parametr\":\"ProfileDataForm_profileInfo__Parametr__ra9NW\",\"profileInfo__Checkbox\":\"ProfileDataForm_profileInfo__Checkbox__2E2WL\",\"profileInfo__CheckboxLabel\":\"ProfileDataForm_profileInfo__CheckboxLabel__WwIcz\",\"profileInfo__CheckboxInput\":\"ProfileDataForm_profileInfo__CheckboxInput__1Vz-F\",\"profileInfo__ParametrInput\":\"ProfileDataForm_profileInfo__ParametrInput__2eFks\",\"bold\":\"ProfileDataForm_bold__3VedU\",\"profileInfo__FormContacts\":\"ProfileDataForm_profileInfo__FormContacts__3ot3S\",\"profileInfo__ContactsTitle\":\"ProfileDataForm_profileInfo__ContactsTitle__UhJuq\",\"profileInfo__Contact\":\"ProfileDataForm_profileInfo__Contact__36MCj\",\"profileInfo__ContactTitle\":\"ProfileDataForm_profileInfo__ContactTitle__1SU6H\",\"profileInfo__ContactValue\":\"ProfileDataForm_profileInfo__ContactValue__2Fqz5\",\"profileInfo__button\":\"ProfileDataForm_profileInfo__button__hBBNS\",\"profileInfo__buttonSave\":\"ProfileDataForm_profileInfo__buttonSave__tJ4jX\",\"formCommonError\":\"ProfileDataForm_formCommonError__2r_5X\"};","import { UserType } from \"../types/types\"\r\nimport { instance } from \"./api\"\r\n\r\n//USERS\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\ntype FolloWUnfollowResponseType = {\r\n    data: {}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance\r\n            .get<GetUsersResponseType>(\r\n                `users?page=${currentPage}&count=${pageSize}`\r\n            )\r\n            .then((res) => res.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance\r\n            .delete<FolloWUnfollowResponseType>(`follow/${id}`)\r\n            .then((res) => res.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance\r\n            .post<FolloWUnfollowResponseType>(`follow/${id}`)\r\n            .then((res) => res.data)\r\n    },\r\n}","import { ResultCodes } from './../api/api'\r\nimport { UserType } from './../types/types'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\nimport { usersAPI } from '../api/users-api'\r\n\r\n//State\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    totalUsersCount: 0,\r\n    isFetching: false, //preloader\r\n    followingInProgress: [] as Array<number>, //array of users ids\r\n}\r\n\r\n//Reducer\r\nconst usersReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VF/USERS/FOLLOW': {\r\n            //возвращаем объект (новый state)\r\n            return {\r\n                //cкопировали state\r\n                ...state,\r\n                //в него пушим массив users\r\n                //(перезаписываем с изменениями исходный)\r\n                users: state.users.map((u) => {\r\n                    //если id пользователя совпадает\r\n                    if (u.id === action.userId) {\r\n                        //копируем объект пользователя поверхностно\r\n                        //внутри него меняем флаг подписки\r\n                        //и возвращаем в новый массив\r\n                        return {\r\n                            ...u,\r\n                            followed: true,\r\n                        }\r\n                    }\r\n                    //иначе возвращаем исходный элемент в новый массив users\r\n                    return u\r\n                }),\r\n            }\r\n        }\r\n\r\n        case 'VF/USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: false,\r\n                        }\r\n                    }\r\n\r\n                    return u\r\n                }),\r\n            }\r\n        }\r\n\r\n        case 'VF/USERS/SET_USERS': {\r\n            return {\r\n                ...state,\r\n                //добавляем новых юзеров из экшена (склеиваем два массива)\r\n                users: [...action.users],\r\n            }\r\n        }\r\n\r\n        case 'VF/USERS/SET_CURRENT_PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n        }\r\n\r\n        case 'VF/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount,\r\n            }\r\n        }\r\n\r\n        case 'VF/USERS/TOGGLE_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        }\r\n\r\n        case 'VF/USERS/TOGGLE_FOLLOWING_IN_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(\r\n                          (id) => id != action.userId\r\n                      ),\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC Types\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    followSucces: (userId: number) =>\r\n        ({\r\n            type: 'VF/USERS/FOLLOW',\r\n            userId,\r\n        } as const),\r\n    unfollowSucces: (userId: number) =>\r\n        ({\r\n            type: 'VF/USERS/UNFOLLOW',\r\n            userId,\r\n        } as const),\r\n    setUsers: (users: Array<UserType>) =>\r\n        ({\r\n            type: 'VF/USERS/SET_USERS',\r\n            users,\r\n        } as const),\r\n    setCurrentPage: (currentPage: number) =>\r\n        ({\r\n            type: 'VF/USERS/SET_CURRENT_PAGE',\r\n            currentPage,\r\n        } as const),\r\n    setTotalUsersCount: (totalCount: number) =>\r\n        ({\r\n            type: 'VF/USERS/SET_TOTAL_USERS_COUNT',\r\n            totalCount,\r\n        } as const),\r\n    toggleIsFetching: (isFetching: boolean) =>\r\n        ({\r\n            type: 'VF/USERS/TOGGLE_IS_FETCHING',\r\n            isFetching,\r\n        } as const),\r\n    toggleFollowingInProgress: (followingInProgress: boolean, userId: number) =>\r\n        ({\r\n            type: 'VF/USERS/TOGGLE_FOLLOWING_IN_PROGRESS',\r\n            followingInProgress,\r\n            userId,\r\n        } as const),\r\n}\r\n\r\n//TC type\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const requestUsers =\r\n    (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n\r\n        let response = await usersAPI.getUsers(\r\n            (currentPage = 1),\r\n            (pageSize = 10)\r\n        )\r\n\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(response.items))\r\n        dispatch(actions.setTotalUsersCount(response.totalCount))\r\n    }\r\n\r\nexport const updateUsers =\r\n    (pageNumber: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(pageNumber))\r\n\r\n        let data = await usersAPI.getUsers(pageNumber, pageSize)\r\n\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n    }\r\n\r\nexport const unfollow =\r\n    (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingInProgress(true, userId))\r\n\r\n        let response = await usersAPI.unfollow(userId)\r\n\r\n        dispatch(actions.toggleFollowingInProgress(false, userId))\r\n        if (response.resultCode == ResultCodes.Success) {\r\n            dispatch(actions.unfollowSucces(userId))\r\n        }\r\n    }\r\n\r\nexport const follow =\r\n    (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingInProgress(true, userId))\r\n\r\n        let response = await usersAPI.follow(userId)\r\n\r\n        dispatch(actions.toggleFollowingInProgress(false, userId))\r\n        if (response.resultCode == ResultCodes.Success) {\r\n            dispatch(actions.followSucces(userId))\r\n        }\r\n    }\r\n\r\nexport default usersReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__aYX3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2eaG4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__1dAnd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__IiANM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__JnV9O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1OCxr\",\"navbar__items\":\"Navbar_navbar__items__1BDow\",\"navbar__item\":\"Navbar_navbar__item__1IK2I\",\"navbar__active\":\"Navbar_navbar__active__2uGOW\",\"navbar__settings\":\"Navbar_navbar__settings__3Wk5o\",\"navbar__friends\":\"Navbar_navbar__friends__TL258\",\"navbar__friendsTitle\":\"Navbar_navbar__friendsTitle__2tJ5n\",\"friends__items\":\"Navbar_friends__items__kd5UW\",\"friends__item\":\"Navbar_friends__item__36Vv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__jCbh6\",\"post__constant\":\"Post_post__constant__2i1FS\",\"post__image\":\"Post_post__image__uNmv9\",\"post__text\":\"Post_post__text__ll9lV\",\"controls\":\"Post_controls__3K897\",\"controls__button\":\"Post_controls__button__1AxAz\",\"controls__buttonClose\":\"Post_controls__buttonClose__33so3\",\"post__update\":\"Post_post__update__uUJgD\",\"border\":\"Post_border__3JKfr\",\"post__textareaContainer\":\"Post_post__textareaContainer__2QAy0\",\"post__textarea\":\"Post_post__textarea__3hAgb\",\"warning__container\":\"Post_warning__container__2mQtP\",\"warning__title\":\"Post_warning__title__34hXG\",\"warning__buttons\":\"Post_warning__buttons__3gzc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo__Text\":\"ProfileData_profileInfo__Text__p2b6P\",\"profileInfo__TextLeft\":\"ProfileData_profileInfo__TextLeft__3_Kn9\",\"profileInfo__Name\":\"ProfileData_profileInfo__Name__313WZ\",\"profileInfo__Parametr\":\"ProfileData_profileInfo__Parametr__1SJjM\",\"bold\":\"ProfileData_bold__2oLR2\",\"profileInfo__Contacts\":\"ProfileData_profileInfo__Contacts__1rf8-\",\"profileInfo__ContactsTitle\":\"ProfileData_profileInfo__ContactsTitle__3aLZA\",\"profileInfo__Contact\":\"ProfileData_profileInfo__Contact__Mhz2q\",\"profileInfo__ContactTitle\":\"ProfileData_profileInfo__ContactTitle__ihaEQ\",\"profileInfo__ContactValue\":\"ProfileData_profileInfo__ContactValue__a_xcH\",\"profileInfo__button\":\"ProfileData_profileInfo__button__3YJNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"StarUsers_users__1QpMK\",\"users__item\":\"StarUsers_users__item__R3vZz\",\"users__img\":\"StarUsers_users__img__d3GoT\",\"users__button\":\"StarUsers_users__button__3ach0\",\"users__info\":\"StarUsers_users__info__2Yba7\",\"users__infoTop\":\"StarUsers_users__infoTop__15aTL\",\"users__name\":\"StarUsers_users__name__1R34U\",\"users__status\":\"StarUsers_users__status__k85pX\",\"users__infoBottom\":\"StarUsers_users__infoBottom__2vHTU\",\"users__city\":\"StarUsers_users__city__7eb4Z\",\"users__country\":\"StarUsers_users__country__1Eqxk\",\"users__button__follow\":\"StarUsers_users__button__follow__OIe6j\",\"users__button__unfollow\":\"StarUsers_users__button__unfollow__3H1W8\",\"active\":\"StarUsers_active__3H9i_\",\"hover\":\"StarUsers_hover__1xweK\"};","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (\r\n    state: AppStateType\r\n): MapStatePropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\n//@ts-ignore\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<MapStatePropsForRedirectType> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"login\" />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n        RedirectComponent\r\n    )\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import { PhotosType, ProfileInfoType } from \"../types/types\"\r\nimport { instance } from \"./api\"\r\n\r\n//PROFILE\r\ntype GetProfileResponseType = {\r\n    aboutMe: string\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos: PhotosType\r\n}\r\n\r\ntype ResponseType <D> = {\r\n    data: D\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\n\r\ntype UpdatePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number | null) {\r\n        return instance\r\n            .get<GetProfileResponseType>(`profile/${userId}`)\r\n            .then((res) => res.data)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance\r\n            .get<string>(`profile/status/${userId}`)\r\n            .then((res) => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance\r\n            .put<ResponseType<{}>>(`profile/status`, {\r\n                status: status,\r\n            })\r\n            .then((res) => res.data)\r\n    },\r\n    updatePhoto(photoFile: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n\r\n        return instance\r\n            .put<ResponseType<UpdatePhotoResponseDataType>>(`profile/photo`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                },\r\n            })\r\n            .then((res) => res.data)\r\n    },\r\n    saveProfile(profile: ProfileInfoType) {\r\n        return instance\r\n            .put<ResponseType<{}>>(`profile`, profile)\r\n            .then((res) => res.data)\r\n    },\r\n}\r\n","import { ResultCodes } from './../api/api'\r\nimport { ProfileInfoType, PostType, PhotosType } from './../types/types'\r\nimport { FormAction, reset, stopSubmit } from 'redux-form'\r\nimport userPhotoDefault from '../assets/images/user_default.png'\r\nimport {\r\n    BaseLocalThunkType,\r\n    BaseThunkType,\r\n    InferActionsTypes,\r\n} from './redux-store'\r\nimport { profileAPI } from '../api/profile-api'\r\n\r\n//State\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    profileInfo: {\r\n        aboutMe: 'про мене',\r\n        contacts: {\r\n            facebook: null,\r\n            website: null,\r\n            vk: null,\r\n            twitter: null,\r\n            instagram: null,\r\n            youtube: null,\r\n            github: null,\r\n            mainLink: null,\r\n        },\r\n        lookingForAJob: true,\r\n        lookingForAJobDescription: 'js',\r\n        fullName: \"Им'я\",\r\n        userId: null,\r\n        photos: {\r\n            small: userPhotoDefault,\r\n            large: userPhotoDefault,\r\n        },\r\n    } as ProfileInfoType,\r\n    status: 'Статус має бути тут' as string | null,\r\n    posts: [\r\n        {\r\n            id: 0,\r\n            message:\r\n                'А настройки профиля отправляются на сервер после изменения, поэтому можно редактировать и перезагружать, всё должно сохраниться и обновиться.)',\r\n        },\r\n        {\r\n            id: 1,\r\n            message:\r\n                'Все эти посты работают со стейтом Redux, но пока не написали API для их хранения на сервере и поэтому после полной перезагрузки странички они возвращаются по дефолту..',\r\n        },\r\n        {\r\n            id: 2,\r\n            message:\r\n                'Дууууже довгий пост. Він показує що, слова переносяться автоматичооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооооо, навіть якщо клавіша залипла:)',\r\n        },\r\n        {\r\n            id: 3,\r\n            message: '✅Привіт, хто хоче покататись?',\r\n        },\r\n        {\r\n            id: 4,\r\n            message: '🕝Сьогодні починаю нову програму! Поїхали!',\r\n        },\r\n    ] as Array<PostType>,\r\n    isUpdatePostMode: false,\r\n}\r\n\r\n//Reducer\r\nconst profileReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VF/PROFILE/ADD_POST': {\r\n            let newPost = {\r\n                id: +`${Math.max(...state.posts.map((p) => p.id)) + 1}`,\r\n                message: action.newPostText,\r\n            }\r\n\r\n            console.log(newPost)\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n\r\n        case 'VF/PROFILE/SET_USER_PROFILE': {\r\n            return {\r\n                ...state,\r\n                profileInfo: action.profileInfo,\r\n            }\r\n        }\r\n\r\n        case 'VF/PROFILE/SET_USER_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        }\r\n\r\n        case 'VF/PROFILE/UPDATE_PHOTO_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                profileInfo: {\r\n                    ...state.profileInfo,\r\n                    photos: action.photos,\r\n                },\r\n            }\r\n        }\r\n\r\n        case 'VF/PROFILE/DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts.filter(\r\n                        (item, index) => index !== action.index\r\n                    ),\r\n                ],\r\n            }\r\n        }\r\n\r\n        case 'VF/PROFILE/UPDATE_POST': {\r\n            let updatePost = {\r\n                id: +`${state.posts[action.index].id}`,\r\n                message: action.message,\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts.map((post, index) => {\r\n                        if (index === action.index) {\r\n                            return updatePost\r\n                        }\r\n\r\n                        return post\r\n                    }),\r\n                ],\r\n            }\r\n        }\r\n\r\n        case 'VF/PROFILE/UPDATE_POST_MODE': {\r\n            return {\r\n                ...state,\r\n                isUpdatePostMode: action.flag,\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC Types\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) =>\r\n        ({\r\n            type: 'VF/PROFILE/ADD_POST',\r\n            newPostText: newPostText,\r\n        } as const),\r\n    setUserProfile: (profileInfo: ProfileInfoType) =>\r\n        ({\r\n            type: 'VF/PROFILE/SET_USER_PROFILE',\r\n            profileInfo: profileInfo,\r\n        } as const),\r\n    setUserStatus: (status: string) =>\r\n        ({\r\n            type: 'VF/PROFILE/SET_USER_STATUS',\r\n            status: status,\r\n        } as const),\r\n    updatePhotoSuccess: (photos: PhotosType) =>\r\n        ({\r\n            type: 'VF/PROFILE/UPDATE_PHOTO_SUCCESS',\r\n            photos,\r\n        } as const),\r\n    deletePostSuccess: (postIndex: number) =>\r\n        ({\r\n            type: 'VF/PROFILE/DELETE_POST',\r\n            index: postIndex,\r\n        } as const),\r\n    updatePostSuccess: (postIndex: number, message: string) =>\r\n        ({\r\n            type: 'VF/PROFILE/UPDATE_POST',\r\n            index: postIndex,\r\n            message: message,\r\n        } as const),\r\n    updatePostMode: (flag: boolean) =>\r\n        ({\r\n            type: 'VF/PROFILE/UPDATE_POST_MODE',\r\n            flag: flag,\r\n        } as const),\r\n}\r\n\r\n//TC Type\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\r\ntype LocalThunkType = BaseLocalThunkType<ActionsTypes | FormAction>\r\n\r\nexport const addNewPost =\r\n    (newPostText: string): LocalThunkType =>\r\n    (dispatch) => {\r\n        dispatch(actions.addPost(newPostText))\r\n        dispatch(reset('ProfileAddNewPost'))\r\n    }\r\n\r\nexport const getUserProfile =\r\n    (userId: number | null): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await profileAPI.getUserProfile(userId)\r\n\r\n        dispatch(actions.setUserProfile(response))\r\n    }\r\n\r\nexport const getUserStatus =\r\n    (userId: number | null): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n\r\n        dispatch(actions.setUserStatus(response))\r\n    }\r\n\r\nexport const updateUserStatus =\r\n    (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await profileAPI.updateStatus(status)\r\n\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            dispatch(actions.setUserStatus(status))\r\n        }\r\n    }\r\n\r\nexport const updatePhoto =\r\n    (file: any): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await profileAPI.updatePhoto(file)\r\n\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            console.log(response)\r\n            dispatch(actions.updatePhotoSuccess(response.data.photos))\r\n        }\r\n    }\r\n\r\nexport const saveProfile =\r\n    (profile: ProfileInfoType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const response = await profileAPI.saveProfile(profile)\r\n        const userId = getState().auth.userId\r\n\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            dispatch(\r\n                stopSubmit('edit-profile', {\r\n                    _error: response.messages[0],\r\n                })\r\n            )\r\n            return Promise.reject(response.messages[0])\r\n        }\r\n    }\r\n\r\nexport const deletePost =\r\n    (id: number): LocalThunkType =>\r\n    (dispatch, getState) => {\r\n        const posts = getState().profilePage.posts\r\n        let postIndex = posts.findIndex(\r\n            (element: PostType) => element.id === id\r\n        )\r\n\r\n        dispatch(actions.deletePostSuccess(postIndex))\r\n        dispatch(actions.updatePostMode(false))\r\n    }\r\n\r\nexport const updatePost =\r\n    (id: number, message: string): LocalThunkType =>\r\n    (dispatch, getState) => {\r\n        const posts = getState().profilePage.posts\r\n        let postIndex = posts.findIndex(\r\n            (element: PostType) => element.id === id\r\n        )\r\n\r\n        dispatch(actions.updatePostSuccess(postIndex, message))\r\n    }\r\n\r\nexport default profileReducer\r\n","import { UserType } from '../types/types'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\n\r\n//State\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 5 as number,\r\n    currentPage: 1 as number,\r\n    totalUsersCount: 0 as number,\r\n    isFetching: false, //preloader\r\n    followingInProgress: [] as number[],\r\n}\r\n\r\n//Reducer\r\nconst starUsersReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VF/STAR-USERS/FOLLOW': {\r\n            //возвращаем объект (новый state)\r\n            return {\r\n                //cкопировали state\r\n                ...state,\r\n                //в него пушим массив users\r\n                //(перезаписываем с изменениями исходный)\r\n                users: state.users.map((u) => {\r\n                    //если id пользователя совпадает\r\n                    if (u.id === action.userId) {\r\n                        //копируем объект пользователя поверхностно\r\n                        //внутри него меняем флаг подписки\r\n                        //и возвращаем в новый массив\r\n                        return {\r\n                            ...u,\r\n                            followed: true,\r\n                        }\r\n                    }\r\n                    //иначе возвращаем исходный элемент в новый массив users\r\n                    return u\r\n                }),\r\n            }\r\n        }\r\n\r\n        case 'VF/STAR-USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return {\r\n                            ...u,\r\n                            followed: false,\r\n                        }\r\n                    }\r\n\r\n                    return u\r\n                }),\r\n            }\r\n        }\r\n\r\n        case 'VF/STAR-USERS/SET_USERS_STARS': {\r\n            return {\r\n                ...state,\r\n                //добавляем новых юзеров из экшена (склеиваем два массива)\r\n                users: [...action.users],\r\n            }\r\n        }\r\n\r\n        case 'VF/STAR-USERS/TOGGLE_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        }\r\n\r\n        case 'VF/STAR-USERS/TOGGLE_FOLLOWING_IN_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(\r\n                          (id) => id != action.userId\r\n                      ),\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC Types\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    followSucces: (userId: number) =>\r\n        ({\r\n            type: 'VF/STAR-USERS/FOLLOW',\r\n            userId,\r\n        } as const),\r\n    unfollowSucces: (userId: number) =>\r\n        ({\r\n            type: 'VF/STAR-USERS/UNFOLLOW',\r\n            userId,\r\n        } as const),\r\n    setUsersStars: (users: Array<UserType>) =>\r\n        ({\r\n            type: 'VF/STAR-USERS/SET_USERS_STARS',\r\n            users,\r\n        } as const),\r\n    toggleIsFetching: (isFetching: boolean) =>\r\n        ({\r\n            type: 'VF/STAR-USERS/TOGGLE_IS_FETCHING',\r\n            isFetching,\r\n        } as const),\r\n    toggleFollowingInProgress: (followingInProgress: boolean, userId: number) =>\r\n        ({\r\n            type: 'VF/STAR-USERS/TOGGLE_FOLLOWING_IN_PROGRESS',\r\n            followingInProgress,\r\n            userId,\r\n        } as const),\r\n}\r\n\r\n//TC type\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const unfollow =\r\n    (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingInProgress(true, userId))\r\n        //side-effect\r\n        let response = true\r\n\r\n        dispatch(actions.toggleFollowingInProgress(false, userId))\r\n        if (response) {\r\n            dispatch(actions.unfollowSucces(userId))\r\n        }\r\n    }\r\n\r\nexport const follow =\r\n    (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingInProgress(true, userId))\r\n        //side-effect\r\n        let response = true\r\n\r\n        dispatch(actions.toggleFollowingInProgress(false, userId))\r\n        if (response) {\r\n            dispatch(actions.followSucces(userId))\r\n        }\r\n    }\r\n\r\nexport default starUsersReducer\r\n","import { FormAction } from 'redux-form'\r\nimport { getAuthUserData } from './auth-reducer'\r\nimport { BaseLocalThunkType, InferActionsTypes } from './redux-store'\r\n\r\n//State\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n}\r\n\r\n//Reducer\r\nconst appReducer = (\r\n    state = initialState,\r\n    action: ActionType\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VF/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC Type\r\ntype ActionType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    initializedSuccess: () =>\r\n        ({\r\n            type: 'VF/APP/INITIALIZED_SUCCESS',\r\n        } as const),\r\n}\r\n\r\n//TC Type\r\ntype LocalThunkType = BaseLocalThunkType<ActionType | FormAction>\r\n\r\nexport const initializeApp = (): LocalThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData())\r\n\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(actions.initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport dialogsReducer from './dialogs-reducer'\r\nimport profileReducer from './profile-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport starUsersReducer from './star-users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport appReducer from './app-reducer'\r\nimport thunkMiddleware, { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    starUsersPage: starUsersReducer,\r\n})\r\n\r\n//StateType\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n//AC Types\r\nexport type InferActionsTypes<T> = T extends {\r\n    [key: string]: (...args: any[]) => infer U\r\n}\r\n    ? U\r\n    : never\r\n\r\n//TC Types\r\ntype Action<T = any> = {\r\n    type: T\r\n}\r\n\r\nexport type BaseThunkType<A extends Action<string>, R = Promise<void>> =\r\n    ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport type BaseLocalThunkType<A extends Action<string>, R = void> = ThunkAction<\r\n    R,\r\n    AppStateType,\r\n    unknown,\r\n    A\r\n>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunkMiddleware))\r\n)\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.scss';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC <PropsType> = ({isAuth, login, logout}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={`wrapper ${s.wrapper}`}>\r\n                <img className={s.header__img} src=\"https://i.pinimg.com/originals/b5/d2/f4/b5d2f4b06c0390c4dadb66da03ade490.png\" />\r\n\r\n                <div className={s.login}>\r\n                    {isAuth\r\n                        ?\r\n                        <div>\r\n                            <p className={s.loginName}>\r\n                                {login}\r\n                            </p>\r\n                            <button className={s.logoutButton} onClick={logout}>\r\n                                Вийти\r\n                            </button>\r\n                        </div>\r\n                        :\r\n                        <NavLink className={s.loginLink} to={'/login'}>\r\n                            Авторизуватись\r\n                        </NavLink>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </header >\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Header from './Header'\r\nimport { logout } from '../../redux/auth-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n//внутренний контейнер\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n//внешний контейнер\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer)\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport s from './Navbar.module.css'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst Navbar: React.FC<PropsType> = ({ isAuth }) => {\r\n    return (\r\n        <aside className={s.navbar}>\r\n            <nav>\r\n                <ul className={s.navbar__items}>\r\n                    <li className={s.navbar__item}>\r\n                        <NavLink\r\n                            to=\"/profile\"\r\n                            activeClassName={s.navbar__active}\r\n                        >\r\n                            Моя сторінка\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={s.navbar__item}>\r\n                        <NavLink to=\"/users\" activeClassName={s.navbar__active}>\r\n                            Мої підписки\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={s.navbar__item}>\r\n                        <NavLink\r\n                            to=\"/starusers\"\r\n                            activeClassName={s.navbar__active}\r\n                        >\r\n                            Зірки спортсмени\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={s.navbar__item}>\r\n                        <NavLink\r\n                            to=\"/dialogs\"\r\n                            activeClassName={s.navbar__active}\r\n                        >\r\n                            Повідомлення\r\n                        </NavLink>\r\n                    </li>\r\n                    {/* <li className={s.navbar__item}>\r\n            <NavLink to=\"/photos\" activeClassName={s.navbar__active}>\r\n              Фото з подорожей\r\n            </NavLink>\r\n          </li> */}\r\n                    <li className={s.navbar__item}>\r\n                        <NavLink\r\n                            to=\"/routes\"\r\n                            activeClassName={s.navbar__active}\r\n                        >\r\n                            Веломаршрути\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={s.navbar__item}>\r\n                        <NavLink\r\n                            to=\"/aboutproject\"\r\n                            activeClassName={s.navbar__active}\r\n                        >\r\n                            Про цей проект\r\n                        </NavLink>\r\n                    </li>\r\n                    {/* <li className={s.navbar__item}>\r\n            <NavLink to=\"/music\" activeClassName={s.navbar__active}>\r\n              Музика\r\n            </NavLink>\r\n          </li> */}\r\n                    {/* <li className={` ${s.navbar__settings}`}>\r\n            <NavLink to=\"/settings\" activeClassName={s.navbar__active}>\r\n              Налаштування\r\n            </NavLink>\r\n          </li> */}\r\n                </ul>\r\n\r\n                <div className={s.navbar__friends}>\r\n                    {isAuth && <NavbarFriends />}\r\n                </div>\r\n            </nav>\r\n        </aside>\r\n    )\r\n}\r\n\r\nconst NavbarFriends = () => {\r\n    return (\r\n        <div>\r\n            <NavLink\r\n                to=\"/friends\"\r\n                className={s.navbar__friendsTitle}\r\n                activeClassName={s.navbar__active}\r\n            >\r\n                Друзі\r\n            </NavLink>\r\n            <ul className={s.friends__items}>\r\n                <li className={s.friends__item}>\r\n                    <img\r\n                        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTo4h8hLgr_MYH_Ep7z769e--2l0dTU01wv9g&usqp=CAU\"\r\n                        alt=\"\"\r\n                    />\r\n                    <p>Михайло</p>\r\n                </li>\r\n                <li className={s.friends__item}>\r\n                    <img\r\n                        src=\"https://instagrammi.ru/wp-content/uploads/arnold-shvarcenegger.jpg\"\r\n                        alt=\"\"\r\n                    />\r\n                    <p>Арнольд</p>\r\n                </li>\r\n                <li className={s.friends__item}>\r\n                    <img\r\n                        src=\"https://kinoafisha.ua/upload/2020/05/news/n27/2c/73954/b_211kuvisyarkii-obraz-teilor-svift.jpg\"\r\n                        alt=\"\"\r\n                    />\r\n                    <p>Тейлор</p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): PropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)\r\n","import React from 'react'\r\nimport { withAuthRedirect } from '../../../../hoc/AuthRedirect'\r\nimport s from './AboutProject.module.scss'\r\nimport cn from 'classnames'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst AboutProject = () => {\r\n    return (\r\n        <div className={s.aboutProject}>\r\n            {/* <p className={s.aboutProject__title}>\r\n                Всем привет, я Александр и это мой первый проект на React.\r\n            </p> */}\r\n            <p className={s.aboutProject__title}>\r\n                Використані наступні технології та бібліотеки:\r\n            </p>\r\n            <ul className={s.stack}>\r\n                <li className={s.stack__item}>\r\n                    <br />\r\n                    <li className={s.list__item}>\r\n                        <span>TypeScript</span>\r\n                    </li>\r\n                    <br />\r\n                    <p className={s.stack__title}>UI:</p>\r\n                    <ul className={s.stack__list}>\r\n                        <li className={s.list__item}>\r\n                            <span>React,</span>, React-Hooks, functional\r\n                            component, class component.\r\n                        </li>\r\n                        <li className={s.list__item}>\r\n                            React Router, Compose, React.memo.\r\n                        </li>\r\n                        <li className={s.list__item}>\r\n                            HOC: WithRouter, WithAuthRedirect.\r\n                        </li>\r\n                        <li className={s.list__item}>\r\n                            React.lazy, React.suspense\r\n                        </li>\r\n                        <li className={s.list__item}>\r\n                            SCSS, CSS Modules, classnames.\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n                <li className={s.stack__item}>\r\n                    <p className={s.stack__title}>BLL:</p>\r\n                    <ul className={s.stack__list}>\r\n                        <li className={s.list__item}>\r\n                            <span>Redux</span>, react-redux, connect.\r\n                        </li>\r\n                        <li className={s.list__item}>FLUX-архітектура.</li>\r\n                        <li className={s.list__item}>Selectors, Reselect.</li>\r\n                        <li className={s.list__item}>\r\n                            Redux-form, validation.\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n                <li className={s.stack__item}>\r\n                    <p className={s.stack__title}>DAL:</p>\r\n                    <ul className={s.stack__list}>\r\n                        <li className={s.list__item}>\r\n                            <span>REST API</span>, Axios.\r\n                        </li>\r\n                        <li className={s.list__item}>\r\n                            <span>Middleware: </span>Redux-thunk.\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n            <p className={s.aboutProject__title}>Реалізовано:</p>\r\n            <ul className={cn(s.stack__list, s.stack__listBottom)}>\r\n                <li className={s.list__item}>\r\n                    <span>Сторінка Авторизації</span>, валідація, captcha.\r\n                </li>\r\n                <li className={s.list__item}>\r\n                    <span>Сторінка Профілю:</span>\r\n                    <p>\r\n                        {' '}\r\n                        - можливість зміни фотографії, статуса та інформації{' '}\r\n                        <span className={s.list__itemPink}>\r\n                            (працює з redux+сервер-API)\r\n                        </span>\r\n                        .\r\n                    </p>\r\n                    <p>\r\n                        {' '}\r\n                        - можливість додавання, редагування, видалення постів{' '}\r\n                        <span className={s.list__itemBlue}>\r\n                            (працює локально з redux)\r\n                        </span>\r\n                        .\r\n                    </p>\r\n                </li>\r\n                <li className={s.list__item}>\r\n                    <span>Сторінка \"Мої підписки\":</span>\r\n                    <p>\r\n                        {' '}\r\n                        - пагінація, preloader, можливість переходу на сторінку\r\n                        юзера{' '}\r\n                        <span className={s.list__itemPink}>\r\n                            (працює з redux+сервер-API)\r\n                        </span>\r\n                        .\r\n                    </p>\r\n                    <p>\r\n                        {' '}\r\n                        - можливість підписуватись на сторінки інших юзерів{' '}\r\n                        <span className={s.list__itemPink}>\r\n                            (працює з redux+сервер-API)\r\n                        </span>\r\n                        .\r\n                    </p>\r\n                </li>\r\n                <li className={s.list__item}>\r\n                    <span>Сторінка \"Повідомлення\":</span>\r\n                    <p>\r\n                        {' '}\r\n                        - можливість вибору діалогу та додавання нового\r\n                        повідомлення.{' '}\r\n                        <span className={s.list__itemBlue}>\r\n                            (працює локально з redux)\r\n                        </span>\r\n                    </p>\r\n                    <p>\r\n                        {' '}\r\n                        - збереження чорнетки повідомлення для кожного діалогу.{' '}\r\n                        <span className={s.list__itemBlue}>\r\n                            (працює локально з redux)\r\n                        </span>\r\n                    </p>\r\n                </li>\r\n                <li className={s.list__item}>\r\n                    <span>Авторський дизайн😉</span>\r\n                </li>\r\n            </ul>\r\n\r\n            <p className={cn(s.aboutProject__title, s.aboutProject__linkTitle)}>\r\n                Посилання на GitHub проєкту:\r\n            </p>\r\n            <ul className={cn(s.stack__list, s.stack__listBottom)}>\r\n                <li className={s.list__item}>\r\n                    <a\r\n                        className={s.aboutProject__link}\r\n                        target=\"_blank\"\r\n                        href=\"https://github.com/alexfuturist/velo-friends\"\r\n                    >\r\n                        https://github.com/alexfuturist/velo-friends\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <p className={cn(s.aboutProject__title, s.aboutProject__linkTitle)}>\r\n                Посилання на Server-API docs:\r\n            </p>\r\n            <ul className={cn(s.stack__list, s.stack__listBottom)}>\r\n                <li className={s.list__item}>\r\n                    <a\r\n                        className={s.aboutProject__link}\r\n                        target=\"_blank\"\r\n                        href=\"https://social-network.samuraijs.com/docs\"\r\n                    >\r\n                        https://social-network.samuraijs.com/docs\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(AboutProject)\r\n","import React from \"react\";\r\nimport { withAuthRedirect } from \"../../../../hoc/AuthRedirect\";\r\n\r\nconst Friends = () => {\r\n    return (\r\n        <div>\r\n            в процессе написания, нужна API:\\\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Friends);","import React from \"react\";\r\nimport { withAuthRedirect } from \"../../../../hoc/AuthRedirect\";\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            в процессе написания, нужна API:\\\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Music);","import React from \"react\";\r\nimport { withAuthRedirect } from \"../../../../hoc/AuthRedirect\";\r\n\r\nconst Photos = () => {\r\n    return (\r\n        <div>\r\n            в процессе написания, нужна API:\\\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Photos);","import React, { useEffect, useState } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, minLengthCreator, required } from '../../../../../utils/validators/validators';\r\nimport s from './NewPost.module.scss';\r\n\r\n\r\nconst maxLength600 = maxLengthCreator(600);\r\nconst minLength1 = minLengthCreator(1);\r\n\r\nconst AddNewPostForm: React.FC = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"newPost\"></label>\r\n                <Field className={s.newPosts__text} component=\"textarea\"\r\n                    name=\"newPost\" id=\"newPost\" placeholder=\"моя новина..\"\r\n                    validate={[required]} maxLength=\"600\"\r\n                />\r\n            </div>\r\n            <button className={`button ${s.newPosts__button}`}>Опублікувати</button>\r\n        </form >\r\n    )\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm({\r\n    form: 'ProfileAddNewPost'\r\n})(AddNewPostForm);\r\n\r\nconst AddNewPost = (props: any) => {\r\n    //колбэк функция \r\n    const onSubmit = (formData: any) => {\r\n        !props.isUpdatePostMode &&\r\n            props.addNewPost(formData.newPost); //вызываем функцию добавления нового поста\r\n    };\r\n\r\n    return (\r\n        <div className={s.newPosts}>\r\n            <p className={s.newPosts__title}>Новий пост</p>\r\n            <AddNewPostFormRedux onSubmit={onSubmit} initialValues={{ newPost: null }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddNewPost;","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport userPhotoDefault from '../../../../../../assets/images/user_default.png'\r\nimport cn from 'classnames'\r\nimport s from './Post.module.scss'\r\nimport { ProfileInfoType } from '../../../../../../types/types'\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    massage: string\r\n    isUpdatePostMode: boolean\r\n    id: number\r\n\r\n    deletePost: (id: number) => void\r\n    updatePost: (id: number, message: string) => void\r\n    updatePostMode: (flag: boolean) => void\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [message, setMessage] = useState(props.massage)\r\n    let [warningMode, setWarningMode] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setMessage(props.massage)\r\n    }, [props.massage])\r\n\r\n    const activateEditMode = () => {\r\n        if (!props.isUpdatePostMode) {\r\n            setEditMode(true)\r\n            props.updatePostMode(true)\r\n        }\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updatePostMode(false)\r\n        props.updatePost(props.id, message)\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n\r\n    const activateWarningMode = () => {\r\n        if (!props.isUpdatePostMode) {\r\n            setWarningMode(true)\r\n            props.updatePostMode(true)\r\n        }\r\n    }\r\n\r\n    const deactivateWarningMode = () => {\r\n        setWarningMode(false)\r\n        props.updatePostMode(false)\r\n    }\r\n\r\n    return (\r\n        <li className={s.post}>\r\n            {!editMode && (\r\n                <div className={s.post__constant}>\r\n                    <img\r\n                        className={s.post__image}\r\n                        src={props.profileInfo.photos.small || userPhotoDefault}\r\n                        alt=\"\"\r\n                    />\r\n                    <p className={s.post__text}>{props.massage}</p>\r\n                    <div className={s.controls}>\r\n                        <div\r\n                            className={s.controls__button}\r\n                            onClick={activateEditMode}\r\n                        >\r\n                            редагувати\r\n                        </div>\r\n                        <div\r\n                            className={cn(\r\n                                s.controls__button,\r\n                                s.controls__buttonClose\r\n                            )}\r\n                            onClick={activateWarningMode}\r\n                        >\r\n                            видалити\r\n                        </div>\r\n\r\n                        {warningMode && (\r\n                            <div\r\n                                className={s.warning__container}\r\n                                onBlur={deactivateWarningMode}\r\n                                tabIndex={1}\r\n                            >\r\n                                <p className={s.warning__title}>\r\n                                    Точно видалити?\r\n                                </p>\r\n                                <div className={s.warning__buttons}>\r\n                                    <div\r\n                                        onClick={() =>\r\n                                            props.deletePost(props.id)\r\n                                        }\r\n                                    >\r\n                                        так\r\n                                    </div>\r\n                                    <div onClick={deactivateWarningMode}>\r\n                                        ні\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {editMode && (\r\n                <div className={s.post__update}>\r\n                    <img\r\n                        className={s.post__image}\r\n                        src={props.profileInfo.photos.small}\r\n                        alt=\"\"\r\n                    />\r\n                    <div className={s.post__textareaContainer}>\r\n                        {message}\r\n                        <textarea\r\n                            className={s.post__textarea}\r\n                            onChange={onPostChange}\r\n                            maxLength={600}\r\n                            value={message}\r\n                            autoFocus={true}\r\n                            onFocus={function (e) {\r\n                                let val = e.target.value\r\n                                e.target.value = ''\r\n                                e.target.value = val\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className={s.controls}>\r\n                        <div onClick={deactivateEditMode}>зберегти</div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport { PostType, ProfileInfoType } from '../../../../../types/types'\r\nimport Post from './Post/Post'\r\nimport s from './Posts.module.scss'\r\n\r\ntype PropsType = {\r\n    posts: PostType[]\r\n    profileInfo: ProfileInfoType\r\n    isUpdatePostMode: boolean\r\n\r\n\tdeletePost: (id: number) => void\r\n    updatePost: (id: number, message: string) => void\r\n    updatePostMode: (flag: boolean) => void\r\n}\r\n\r\nconst Posts: React.FC<PropsType> = (props) => {\r\n    let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map((p) => (\r\n            <Post\r\n                profileInfo={props.profileInfo}\r\n                massage={p.message}\r\n                deletePost={props.deletePost}\r\n                updatePost={props.updatePost}\r\n                updatePostMode={props.updatePostMode}\r\n                isUpdatePostMode={props.isUpdatePostMode}\r\n                key={p.id}\r\n                id={p.id}\r\n            />\r\n        ))\r\n\r\n    return <ul className={s.posts}>{postsElements}</ul>\r\n}\r\n\r\nexport default Posts\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport s from './ProfileStatus.module.scss';\r\n\r\ntype PropsType = {\r\n    status: string | null\r\n    isOwner: boolean\r\n\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        if (props.status !== undefined) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        if (props.isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        //@ts-ignore\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    \r\n    return (\r\n        <div className={s.profileStatus}>\r\n            { !editMode &&\r\n                <p className={s.profileStatus__Description} onClick={activateEditMode}>{props.status}</p>\r\n            }\r\n            { editMode &&\r\n                <input onChange={onStatusChange} maxLength={25} autoFocus={true} onBlur={deactivateEditMode}\r\n                //@ts-ignore\r\n                    className={s.profileStatus__input} value={status} />\r\n            }\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react'\r\nimport { ProfileInfoType } from '../../../../../../types/types'\r\nimport ProfileStatusWithHooks from '../ProfileStatus/ProfileStatusWithHooks'\r\nimport s from './ProfileData.module.scss'\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    status: string | null\r\n    isOwner: boolean\r\n\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<PropsType> = ({\r\n    profileInfo,\r\n    status,\r\n    isOwner,\r\n    goToEditMode,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n}) => {\r\n    return (\r\n        <div className={s.profileInfo__Text}>\r\n            <div className={s.profileInfo__TextLeft}>\r\n                <div className={s.profileInfo__Name}>\r\n                    {' '}\r\n                    {profileInfo.fullName}{' '}\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <ProfileStatusWithHooks\r\n                        status={status}\r\n                        getUserStatus={getUserStatus}\r\n                        updateUserStatus={updateUserStatus}\r\n                        isOwner={isOwner}\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <span className={s.bold}>Шукаю роботу:&#160;</span>\r\n                    {profileInfo.lookingForAJob ? 'так' : 'ні'}\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <p className={s.bold}>Мої навички:</p>\r\n                    {profileInfo.lookingForAJobDescription}\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <p className={s.bold}>Про мене:</p>\r\n                    {profileInfo.aboutMe}\r\n                </div>\r\n\r\n                {isOwner && (\r\n                    <div>\r\n                        <button\r\n                            className={s.profileInfo__button}\r\n                            onClick={goToEditMode}\r\n                        >\r\n                            Редагувати профіль\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className={s.profileInfo__Contacts}>\r\n                <div className={s.profileInfo__ContactsTitle}>Контакти:</div>\r\n                {Object.keys(profileInfo.contacts).map((key) => {\r\n                    return (\r\n                        <Contact\r\n                            contactTitle={key}\r\n                            // @ts-ignore\r\n                            contactValue={profileInfo.contacts[key]}\r\n                            key={key}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.profileInfo__Contact}>\r\n            <span className={s.profileInfo__ContactTitle}>\r\n                {contactTitle}:&#160;\r\n            </span>\r\n            <span className={s.profileInfo__ContactValue}>\r\n                <a target=\"_blank\" href={contactValue}>\r\n                    {contactValue}\r\n                </a>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData\r\n\r\n// const ProfileInfo = (props) => {\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className={s.profileCover}>\r\n//                 <img className={s.profileCover__img}\r\n//                  src=\"https://s1.1zoom.me/b5050/382/388402-svetik_1920x1080.jpg\" />\r\n//             </div>\r\n//             <div className={s.profileInfo}>\r\n//                 <img className={s.profileInfo__Avatar}\r\n//                  src=\"https://tengrinews.kz/userdata/images/u38/resized/35fcc7bea1f32a6437650758096b9f89.jpeg\" />\r\n//                 <div className={s.profileInfo__Text} >\r\n//                     <p className={s.profileInfo__Name}> Володимир Погребняк</p>\r\n//                     <p className={s.profileInfo__Parametr}>Вік: 36</p>\r\n//                     <p className={s.profileInfo__Parametr}>Освіта: КНУ</p>\r\n//                     <p className={s.profileInfo__Parametr}>Місто: Жмеринка</p>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default ProfileInfo;\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { ProfileInfoType } from '../../../../../../types/types'\r\nimport ProfileStatusWithHooks from '../ProfileStatus/ProfileStatusWithHooks'\r\nimport s from './ProfileDataForm.module.scss'\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    status: string | null\r\n    isOwner: boolean\r\n    error: boolean\r\n\r\n    handleSubmit: () => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType> = ({\r\n    handleSubmit,\r\n    profileInfo,\r\n    status,\r\n    error,\r\n    isOwner,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n}) => {\r\n    return (\r\n        <form className={s.profileInfo__Form} onSubmit={handleSubmit}>\r\n            <div className={s.profileInfo__FormLeft}>\r\n                <div>\r\n                    <Field\r\n                        className={s.profileInfo__Name}\r\n                        name=\"fullName\"\r\n                        placeholder=\"Моє ім'я\"\r\n                        component=\"input\"\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <ProfileStatusWithHooks\r\n                        status={status}\r\n                        getUserStatus={getUserStatus}\r\n                        updateUserStatus={updateUserStatus}\r\n                        isOwner={isOwner}\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Checkbox}>\r\n                    <span className={s.bold}>Шукаю роботу:&#160;</span>\r\n                    <Field\r\n                        className={s.profileInfo__CheckboxInput}\r\n                        name=\"lookingForAJob\"\r\n                        component=\"input\"\r\n                        type=\"checkbox\"\r\n                        id=\"lookingForAJob\"\r\n                    />\r\n                    <label\r\n                        className={s.profileInfo__CheckboxLabel}\r\n                        htmlFor=\"lookingForAJob\"\r\n                    ></label>\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <div className={s.bold}>Мої навички:</div>\r\n                    <Field\r\n                        className={s.profileInfo__ParametrInput}\r\n                        name=\"lookingForAJobDescription\"\r\n                        component=\"input\"\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.profileInfo__Parametr}>\r\n                    <div className={s.bold}>Про мене:</div>\r\n                    <Field\r\n                        className={s.profileInfo__ParametrInput}\r\n                        name=\"aboutMe\"\r\n                        component=\"input\"\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className={`${s.profileInfo__button} ${s.profileInfo__buttonSave}`}\r\n                    >\r\n                        Зберегти зміни\r\n                    </button>\r\n                </div>\r\n\r\n                <div>\r\n                    {error && <div className={s.formCommonError}>{error}</div>}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.profileInfo__FormContacts}>\r\n                <div className={s.profileInfo__ContactsTitle}>Контакти:</div>\r\n                {Object.keys(profileInfo.contacts).map((key) => {\r\n                    return (\r\n                        <div className={s.profileInfo__Contact}>\r\n                            <span className={s.profileInfo__ContactTitle}>\r\n                                {key}:&#160;\r\n                            </span>\r\n                            <Field\r\n                                className={s.profileInfo__ContactValue}\r\n                                name={`contacts.` + key}\r\n                                placeholder={key}\r\n                                component=\"input\"\r\n                                key={key}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormRedux = reduxForm({ form: `edit-profile` })(\r\n    //@ts-ignore\r\n    ProfileDataForm\r\n)\r\n\r\nexport default ProfileDataFormRedux\r\n\r\n// const ProfileInfo = (props) => {\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className={s.profileCover}>\r\n//                 <img className={s.profileCover__img}\r\n//                  src=\"https://s1.1zoom.me/b5050/382/388402-svetik_1920x1080.jpg\" />\r\n//             </div>\r\n//             <div className={s.profileInfo}>\r\n//                 <img className={s.profileInfo__Avatar}\r\n//                  src=\"https://tengrinews.kz/userdata/images/u38/resized/35fcc7bea1f32a6437650758096b9f89.jpeg\" />\r\n//                 <div className={s.profileInfo__Text} >\r\n//                     <p className={s.profileInfo__Name}> Володимир Погребняк</p>\r\n//                     <p className={s.profileInfo__Parametr}>Вік: 36</p>\r\n//                     <p className={s.profileInfo__Parametr}>Освіта: КНУ</p>\r\n//                     <p className={s.profileInfo__Parametr}>Місто: Жмеринка</p>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default ProfileInfo;\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './ProfileInfo.module.scss'\r\nimport userPhotoDefault from '../../../../../assets/images/user_default.png'\r\nimport ProfileData from './ProfileData/ProfileData'\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm'\r\nimport ProfileDataFormRedux from './ProfileDataForm/ProfileDataForm'\r\nimport { ProfileInfoType } from '../../../../../types/types'\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    status: string | null\r\n    isOwner: boolean\r\n\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    updatePhoto: () => void\r\n    saveProfile: (profile: any) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = React.memo((props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    //@ts-ignore\r\n    const onMainPhotoSelected = (e: ChangeEvent<string>) => {\r\n        //@ts-ignore\r\n        if (e.target.files.length) {\r\n            //@ts-ignore\r\n            props.updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        //@ts-ignore\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.profileCover}>\r\n                <img\r\n                    className={s.profileCover__img}\r\n                    src=\"https://s1.1zoom.me/b5050/382/388402-svetik_1920x1080.jpg\"\r\n                />\r\n            </div>\r\n            <div className={s.profileInfo}>\r\n                <div className={s.profileInfo__PhotoWrapper}>\r\n                    <img\r\n                        className={s.profileInfo__PhotoImage}\r\n                        src={props.profileInfo.photos.large || userPhotoDefault}\r\n                    />\r\n                    <div>\r\n                        {props.isOwner && (\r\n                            <div className={s.input__wrapper}>\r\n                                <input\r\n                                    className={s.input__file}\r\n                                    //@ts-ignore\r\n                                    onChange={onMainPhotoSelected}\r\n                                    type=\"file\"\r\n                                    name=\"file\"\r\n                                    id=\"input__file\"\r\n                                />\r\n                                <label\r\n                                    className={s.input__fileButton}\r\n                                    htmlFor=\"input__file\"\r\n                                >\r\n                                    <span className={s.input__fileIcon}></span>\r\n                                    <span className={s.input__fileButtonText}>\r\n                                        Оновити фото\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                {editMode ? (\r\n                    <ProfileDataFormRedux\r\n                        {...props}\r\n                        //@ts-ignore\r\n                        getUserStatus={props.getUserStatus}\r\n                        updateUserStatus={props.updateUserStatus}\r\n                        onSubmit={onSubmit}\r\n                        initialValues={props.profileInfo}\r\n                    />\r\n                ) : (\r\n                    <ProfileData\r\n                        {...props}\r\n                        getUserStatus={props.getUserStatus}\r\n                        updateUserStatus={props.updateUserStatus}\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileInfo\r\n","import React, { useEffect } from 'react'\r\nimport s from './Profile.module.css'\r\n\r\nimport AddNewPost from './NewPost/NewPost'\r\nimport Posts from './Posts/Posts'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport { PostType, ProfileInfoType } from '../../../../types/types'\r\n\r\ntype PropsType = {\r\n    profileInfo: ProfileInfoType\r\n    status: string | null\r\n    posts: PostType[]\r\n    // newPostText: state.profilePage.newPostText\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    isUpdatePostMode: boolean\r\n    isOwner: boolean\r\n\r\n    addNewPost: (newPostText: string) => void\r\n    setUserProfile: () => void\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    updatePhoto: () => void\r\n    saveProfile: (profile: ProfileInfoType) => void\r\n    deletePost: (id: number) => void\r\n    updatePost: (id: number, message: string) => void\r\n    updatePostMode: (flag: boolean) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.updatePostMode(false)\r\n    }, [])\r\n\r\n    return (\r\n        <section className={s.profile}>\r\n            <ProfileInfo\r\n                profileInfo={props.profileInfo}\r\n                status={props.status}\r\n                getUserStatus={props.getUserStatus}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                updatePhoto={props.updatePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            {props.isOwner && (\r\n                <div>\r\n                    <AddNewPost\r\n                        addNewPost={props.addNewPost}\r\n                        updatePostMode={props.updatePostMode}\r\n                        isUpdatePostMode={props.isUpdatePostMode}\r\n                    />\r\n                    <Posts\r\n                        posts={props.posts}\r\n                        profileInfo={props.profileInfo}\r\n                        deletePost={props.deletePost}\r\n                        updatePost={props.updatePost}\r\n                        updatePostMode={props.updatePostMode}\r\n                        isUpdatePostMode={props.isUpdatePostMode}\r\n                    />\r\n                </div>\r\n            )}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    addNewPost,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    updatePhoto,\r\n    saveProfile,\r\n    deletePost,\r\n    updatePost,\r\n    actions\r\n} from '../../../../redux/profile-reducer'\r\nimport Profile from './Profile'\r\n\r\nimport { withRouter } from 'react-router-dom'\r\nimport { withAuthRedirect } from '../../../../hoc/AuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../../../redux/redux-store'\r\nimport { PostType, ProfileInfoType } from '../../../../types/types'\r\n\r\ntype MapStatePropsType = {\r\n    profileInfo: ProfileInfoType\r\n    status: string | null\r\n    posts: PostType[]\r\n    // newPostText: state.profilePage.newPostText\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    isUpdatePostMode: boolean\r\n    match?: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewPost: (newPostText: string) => void\r\n    setUserProfile: () => void\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    updatePhoto: () => void\r\n    saveProfile: (profile: ProfileInfoType) => void\r\n    deletePost: (id: number) => void\r\n    updatePost: () => void\r\n    updatePostMode: () => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n// //внутренний контейнер\r\n// const ProfileContainer = (props: any) => {\r\n//     const refreshProfile = () => {\r\n//         // debugger\r\n\r\n//         let userId = props.match.params.userId\r\n\r\n//         if (!userId) {\r\n//             userId = props.authorizedUserId\r\n//         }\r\n\r\n//         props.getUserProfile(userId)\r\n//         props.getUserStatus(userId)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         refreshProfile()\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         refreshProfile()\r\n//     }, [props.match.params.userId])\r\n\r\n//     return <Profile {...props} isOwner={!props.match.params.userId} />\r\n// }\r\n\r\n//внутренний контейнер\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n//\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profileInfo: state.profilePage.profileInfo,\r\n        status: state.profilePage.status,\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        isUpdatePostMode: state.profilePage.isUpdatePostMode,\r\n    }\r\n}\r\n\r\n// <MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        {\r\n            setUserProfile: actions.setUserProfile,\r\n            updatePostMode: actions.updatePostMode,\r\n            addNewPost,\r\n            getUserProfile,\r\n            getUserStatus,\r\n            updateUserStatus,\r\n            updatePhoto,\r\n            saveProfile,\r\n            deletePost,\r\n            updatePost,\r\n        }\r\n    ),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer) as React.ComponentType\r\n","import React from \"react\";\r\nimport { withAuthRedirect } from \"../../../../hoc/AuthRedirect\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <div>\r\n            в процессе написания, нужна API:\\\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Routes);","import React from \"react\";\r\nimport { withAuthRedirect } from \"../../../../hoc/AuthRedirect\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            в процессе написания, нужна API:\\\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Settings);","import React, { useEffect } from 'react'\r\nimport { UserType } from '../../../../types/types'\r\nimport s from './StarUsers.module.scss'\r\n\r\ntype PropsType = {\r\n    users: any[]\r\n    \r\n\tunfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n\tsetUsersStars: (users: any) => void\r\n}\r\n\r\nconst StarUsers: React.FC<PropsType> = (props) => {\r\n    useEffect(() => setUsersStars(), [])\r\n\r\n    let setUsersStars = () => {\r\n        if (props.users.length === 0) {\r\n            props.setUsersStars([\r\n                {\r\n                    id: 1,\r\n                    followed: true,\r\n                    avatar: 'https://glavcom.ua/img/article/6194/8_main.jpg',\r\n                    fullName: 'Олег',\r\n                    status: 'Відпочиваю після концерту. Вовчиці дали вогню..)',\r\n                    location: {\r\n                        city: 'Київ',\r\n                        country: 'Україна',\r\n                    },\r\n                },\r\n                {\r\n                    id: 2,\r\n                    followed: false,\r\n                    avatar: 'https://fdlx.com/wp-content/uploads/donald-tramp-uxodit-v-otpusk-dlya-uchastiya-v-otborochnyx-igrax-po-golfu.jpg',\r\n                    fullName: 'Donald',\r\n                    status: \"I'd better go play golf ..\",\r\n                    location: {\r\n                        city: 'Нью-Йорк',\r\n                        country: 'США',\r\n                    },\r\n                },\r\n                {\r\n                    id: 3,\r\n                    followed: false,\r\n                    avatar: 'https://cdn.livesport.ru/l/hockey/2019/03/01/lukashenko/picture.jpg?1551464140',\r\n                    fullName: 'Александр',\r\n                    status: 'Я очень люблю спорт — это самое лучшее мое качество.',\r\n                    location: {\r\n                        city: 'Мінськ',\r\n                        country: 'Білорусь',\r\n                    },\r\n                },\r\n                {\r\n                    id: 4,\r\n                    followed: true,\r\n                    avatar: 'https://delo.ua/files/news/images/3624/99/picture2_klichko-pronik-v-_362499_p0.jpg',\r\n                    fullName: 'Віталій',\r\n                    status: 'Дайте мне точку опоры! И я обопрусь.',\r\n                    location: {\r\n                        city: 'Київ',\r\n                        country: 'Україна',\r\n                    },\r\n                },\r\n            ])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className={s.users}>\r\n            <div>\r\n                {props.users.map((u) => (\r\n                    <div key={u.id} className={s.users__item}>\r\n                        <div className={s.users__img}>\r\n                            <img src={u.avatar} alt=\"\" />\r\n                            <div>\r\n                                {u.followed ? (\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            props.unfollow(u.id)\r\n                                        }}\r\n                                        className={`${s.users__button__unfollow} ${s.users__button} button`}\r\n                                    >\r\n                                        <span className={s.active}>\r\n                                            Слідкую\r\n                                        </span>\r\n                                        <span className={s.hover}>\r\n                                            Відписатись\r\n                                        </span>\r\n                                    </button>\r\n                                ) : (\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            props.follow(u.id)\r\n                                        }}\r\n                                        className={`${s.users__button__follow} ${s.users__button} button`}\r\n                                    >\r\n                                        Підписатись\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.users__info}>\r\n                            <div className={s.users__infoTop}>\r\n                                <p className={s.users__name}>{u.fullName}</p>\r\n                                <p className={s.users__city}>\r\n                                    {u.location.city},\r\n                                </p>\r\n                            </div>\r\n                            <div className={s.users__infoBottom}>\r\n                                <p className={s.users__status}>{u.status}</p>\r\n                                <p className={s.users__country}>\r\n                                    {u.location.country}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default StarUsers\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../../../hoc/AuthRedirect'\r\nimport { AppStateType } from '../../../../redux/redux-store'\r\nimport { unfollow, follow, actions } from '../../../../redux/star-users-reducer'\r\nimport {\r\n    getStars,\r\n    getIsFetchingStars,\r\n    getFollowingInProgressStars,\r\n} from '../../../../redux/users-selectors'\r\nimport { Preloader } from '../../../Common/Preloader'\r\nimport StarUsers from './StarUsers'\r\n\r\ntype PropsType = {\r\n    users: any[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n\r\n    toggleFollowingInProgress: (\r\n        followingInProgress: number[],\r\n        userId: number\r\n    ) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n    updateUsers: (pageNumber: number, pageSize: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    setUsersStars: (users: any) => void\r\n}\r\n\r\n//внутренний контейнер\r\nclass StarUsersContainer extends React.Component<PropsType> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <StarUsers\r\n                    users={this.props.users}\r\n                    unfollow={this.props.unfollow}\r\n                    follow={this.props.follow}\r\n                    setUsersStars={this.props.setUsersStars}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//внешний контейнер\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getStars(state),\r\n        isFetching: getIsFetchingStars(state),\r\n        followingInProgress: getFollowingInProgressStars(state),\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        unfollow,\r\n        follow,\r\n        setUsersStars: actions.setUsersStars,\r\n    }),\r\n    withAuthRedirect\r\n)(StarUsersContainer) as React.ComponentType\r\n","import React, { Suspense } from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n} from 'react-router-dom'\r\nimport AboutProject from './AboutProject/AboutProject'\r\n\r\nimport s from './Content.module.css'\r\n\r\nimport Friends from './Friends/Friends'\r\nimport Music from './Music/Music'\r\nimport Photos from './Photos/Photos'\r\nimport ProfileContainer from './Profile/ProfileContainer'\r\nimport Routes from './Routes/Routes'\r\nimport Settings from './Settings/Settings'\r\nimport StarUsersContainer from './StarUsers/StarUsersContainer'\r\n\r\n// import DialogsContainer from './Dialogs/DialogsContainer'\r\n// import UsersContainer from './Users/UsersContainer'\r\n// import Login from '../../Login/Login'\r\nconst DialogsContainer = React.lazy(() => import('./Dialogs/DialogsContainer'));\r\nconst UsersContainer = React.lazy(() => import('./Users/UsersContainer'));\r\nconst Login = React.lazy(() => import('../../Login/Login'));\r\n\r\nconst Content = () => {\r\n    return (\r\n        <div className={s.content}>\r\n            <Suspense fallback={<div>Завантаження...</div>}>\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/\"\r\n                        render={() => <Redirect to=\"/profile\" />}\r\n                    />\r\n                    <Route path=\"/login\" render={() => <Login />} />\r\n                    <Route\r\n                        path=\"/profile/:userId?\"\r\n                        render={() => <ProfileContainer />}\r\n                    />\r\n                    <Route\r\n                        path=\"/dialogs/:dialogId?\"\r\n                        render={() => <DialogsContainer />}\r\n                    />\r\n                    <Route path=\"/users\" render={() => <UsersContainer />} />\r\n                    <Route\r\n                        path=\"/starusers\"\r\n                        render={() => <StarUsersContainer />}\r\n                    />\r\n                    <Route path=\"/photos\" render={() => <Photos />} />\r\n                    <Route path=\"/routes\" render={() => <Routes />} />\r\n                    <Route\r\n                        path=\"/aboutproject\"\r\n                        render={() => <AboutProject />}\r\n                    />\r\n                    <Route path=\"/music\" render={() => <Music />} />\r\n                    <Route path=\"/settings\" render={() => <Settings />} />\r\n                    <Route path=\"/friends\" render={() => <Friends />} />;\r\n                    <Route path=\"*\" render={() => <div>404 NotFound</div>} />\r\n                </Switch>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport Navbar from './Navbar/Navbar'\r\nimport Content from './Content/Content'\r\nimport s from './Main.module.css'\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={`${s.main} wrapper`}>\r\n                <Navbar />\r\n                <Content />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React, { Component } from 'react'\n\nimport './components/Common/_normalize.css'\nimport './components/Common/_nullstyle.css'\nimport './components/Common/__scrollbar.scss'\nimport './App.scss'\n\nimport HeaderContainer from './components/Header/HeaderContainer'\nimport Main from './components/Main/Main'\nimport { initializeApp } from './redux/app-reducer'\nimport { connect } from 'react-redux'\n\nimport { compose } from 'redux'\nimport { withRouter } from 'react-router-dom'\nimport { Preloader } from './components/Common/Preloader'\nimport { AppStateType } from './redux/redux-store'\n\ntype MapStatePropsType = {\n    initialized: boolean\n}\n\ntype MapDispatchPropsType = {\n    initializeApp: () => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType\n\nclass App extends Component<PropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />\n        }\n\n        return (\n            <div className=\"app\">\n                <HeaderContainer />\n                <Main />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    initialized: state.app.initialized,\n})\n\n// <MapStatePropsType, MapDispatchPropsType, undefined, AppStateType>\n\nexport default compose(\n    withRouter,\n    connect(\n        mapStateToProps,\n        {\n            initializeApp,\n        }\n    )\n)(App) as React.ComponentType\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { store } from './redux/redux-store'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport './index.scss'\n\n//функция отрисовки (перерисовки) UI\nlet renderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <Provider store={store}>\n                    <App />\n                </Provider>\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    )\n}\n\n//первичная отрисовка\nrenderEntireTree()\n\n//подписка на события изменения\n//переписывает метод _renderEntireTree() в state\nstore.subscribe(() => {\n    renderEntireTree()\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileCover\":\"ProfileInfo_profileCover__3-yGo\",\"profileCover__img\":\"ProfileInfo_profileCover__img__1NA-w\",\"profileInfo\":\"ProfileInfo_profileInfo__3weOg\",\"profileInfo__PhotoWrapper\":\"ProfileInfo_profileInfo__PhotoWrapper__1K1AW\",\"profileInfo__PhotoImage\":\"ProfileInfo_profileInfo__PhotoImage__33HFj\",\"input__wrapper\":\"ProfileInfo_input__wrapper__2FprL\",\"input__file\":\"ProfileInfo_input__file__1uKKg\",\"input__fileButton\":\"ProfileInfo_input__fileButton__1N3_1\",\"input__fileIcon\":\"ProfileInfo_input__fileIcon__1udn2\",\"input__fileButtonText\":\"ProfileInfo_input__fileButtonText__2-1-2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qz9G\",\"wrapper\":\"Header_wrapper__3UylV\",\"header__img\":\"Header_header__img__1d354\",\"login\":\"Header_login__1FCbm\",\"loginName\":\"Header_loginName__1Lw_5\",\"logoutButton\":\"Header_logoutButton__2yFXW\",\"loginLink\":\"Header_loginLink__1YazE\"};","export default __webpack_public_path__ + \"static/media/user_default.883504fe.png\";","import { instance } from './api'\r\n\r\n//AUTH\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {\r\n        id: number\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\ntype LogoutResponseType = {\r\n    data: {}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`).then((res) => res.data)\r\n    },\r\n    login(\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean,\r\n        captcha = null as string | null\r\n    ) {\r\n        return instance\r\n            .post<LoginResponseType>(`auth/login`, {\r\n                email,\r\n                password,\r\n                rememberMe,\r\n                captcha,\r\n            })\r\n            .then((res) => res.data)\r\n    },\r\n    logout() {\r\n        return instance\r\n            .delete<LogoutResponseType>(`auth/login`)\r\n            .then((res) => res.data)\r\n    },\r\n}\r\n","import { instance } from \"./api\"\r\n\r\n//SECURITY\r\ntype GetCaptchaUrl = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance\r\n            .get<GetCaptchaUrl>(`security/get-captcha-url`)\r\n            .then((res) => res.data)\r\n    },\r\n}\r\n","import { ResultCodeForCaptcha, ResultCodes } from './../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\nimport { authAPI } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\n\r\n//State\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n}\r\n\r\n//Reducer\r\nconst authReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VF/AUTH/SET_AUTH_USER_DATA':\r\n        case 'VF/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC Types\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (\r\n        userId: number | null,\r\n        email: string | null,\r\n        login: string | null,\r\n        isAuth: boolean = true\r\n    ) => ({\r\n        type: 'VF/AUTH/SET_AUTH_USER_DATA',\r\n        payload: {\r\n            userId,\r\n            email,\r\n            login,\r\n            isAuth,\r\n        },\r\n    }),\r\n    getCaptchaUrlSuccess: (captchaUrl: string | null) => ({\r\n        type: 'VF/AUTH/GET_CAPTCHA_URL_SUCCESS',\r\n        payload: {\r\n            captchaUrl,\r\n        },\r\n    }),\r\n}\r\n\r\n//TC Type\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.me()\r\n\r\n    if (response.resultCode === ResultCodes.Success) {\r\n        let { id, email, login } = response.data\r\n        dispatch(actions.setAuthUserData(id, email, login))\r\n    }\r\n}\r\n\r\nexport const login =\r\n    (\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean,\r\n        captcha: string\r\n    ): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await authAPI.login(\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        )\r\n\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            dispatch(getAuthUserData())\r\n            actions.getCaptchaUrlSuccess(null)\r\n        } else {\r\n            if (\r\n                response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired\r\n            ) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n\r\n            let message =\r\n                response.messages.length > 0\r\n                    ? response.messages[0]\r\n                    : 'some error'\r\n\r\n            dispatch(\r\n                //@ts-ignore\r\n                stopSubmit('login', {\r\n                    _error: message,\r\n                })\r\n            )\r\n        }\r\n    }\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n\r\n    if (response.resultCode === ResultCodes.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.url\r\n\r\n    console.log(`каптча с сервера:` + captchaUrl)\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutProject\":\"AboutProject_aboutProject__3108x\",\"aboutProject__title\":\"AboutProject_aboutProject__title__1nDr4\",\"stack\":\"AboutProject_stack__266qZ\",\"stack__item\":\"AboutProject_stack__item__2wazi\",\"stack__title\":\"AboutProject_stack__title__dWcY6\",\"list__item\":\"AboutProject_list__item__B8hhI\",\"stack__listBottom\":\"AboutProject_stack__listBottom__2cYOM\",\"list__itemBlue\":\"AboutProject_list__itemBlue__R1JHc\",\"list__itemPink\":\"AboutProject_list__itemPink__3bFei\",\"aboutProject__linkTitle\":\"AboutProject_aboutProject__linkTitle__HMllL\",\"aboutProject__link\":\"AboutProject_aboutProject__link__1j4re\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPosts\":\"NewPost_newPosts__3p6ZS\",\"newPosts__title\":\"NewPost_newPosts__title__y93Wa\",\"newPosts__text\":\"NewPost_newPosts__text__IO62E\",\"newPosts__button\":\"NewPost_newPosts__button__3TNCU\"};","type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\ntype LengthValidatorType = (value: number) => FieldValidatorType\r\n\r\nexport const minLengthCreator: LengthValidatorType = (minLength) => (value) => {\r\n    if (value.length < minLength) {\r\n        return `Min length is ${minLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport const maxLengthCreator: LengthValidatorType = (maxLength) => (value) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n","import React from 'react';\r\n\r\nimport s from './Preloader.module.scss';\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.preloader}>\r\n            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n        </div>\r\n    )\r\n}","import { AppStateType } from \"./redux-store\";\r\n\r\n//USERS\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n};\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n};\r\n\r\n//STAR-USERS\r\nexport const getStars = (state: AppStateType) => {\r\n    return state.starUsersPage.users\r\n};\r\n\r\nexport const getIsFetchingStars = (state: AppStateType) => {\r\n    return state.starUsersPage.isFetching\r\n};\r\n\r\nexport const getFollowingInProgressStars = (state: AppStateType) => {\r\n    return state.starUsersPage.followingInProgress\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatus\":\"ProfileStatus_profileStatus__21WzX\",\"profileStatus__Description\":\"ProfileStatus_profileStatus__Description__mqL0z\",\"profileStatus__input\":\"ProfileStatus_profileStatus__input__3kq_G\"};"],"sourceRoot":""}